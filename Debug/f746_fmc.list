
f746_fmc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f7c  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  08001144  08001144  00011144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001320  08001320  00011320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001324  08001324  00011324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000040  20000004  0800132c  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000044  0800132c  00020044  2**0
                  ALLOC
  8 .ARM.attributes 0000002a  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   000021e9  00000000  00000000  0002002e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00000814  00000000  00000000  00022217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000001a0  00000000  00000000  00022a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000138  00000000  00000000  00022bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0001bc08  00000000  00000000  00022d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000268c  00000000  00000000  0003e910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0009bb8d  00000000  00000000  00040f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  000dcb29  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000049c  00000000  00000000  000dcb7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000004 	.word	0x20000004
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800112c 	.word	0x0800112c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000008 	.word	0x20000008
 8000204:	0800112c 	.word	0x0800112c

08000208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000208:	b480      	push	{r7}
 800020a:	b083      	sub	sp, #12
 800020c:	af00      	add	r7, sp, #0
 800020e:	4603      	mov	r3, r0
 8000210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000216:	2b00      	cmp	r3, #0
 8000218:	db0b      	blt.n	8000232 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	f003 021f 	and.w	r2, r3, #31
 8000220:	4906      	ldr	r1, [pc, #24]	; (800023c <__NVIC_EnableIRQ+0x34>)
 8000222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000226:	095b      	lsrs	r3, r3, #5
 8000228:	2001      	movs	r0, #1
 800022a:	fa00 f202 	lsl.w	r2, r0, r2
 800022e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000232:	bf00      	nop
 8000234:	370c      	adds	r7, #12
 8000236:	46bd      	mov	sp, r7
 8000238:	bc80      	pop	{r7}
 800023a:	4770      	bx	lr
 800023c:	e000e100 	.word	0xe000e100

08000240 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000240:	b480      	push	{r7}
 8000242:	b083      	sub	sp, #12
 8000244:	af00      	add	r7, sp, #0
 8000246:	4603      	mov	r3, r0
 8000248:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800024a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800024e:	2b00      	cmp	r3, #0
 8000250:	db12      	blt.n	8000278 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000252:	79fb      	ldrb	r3, [r7, #7]
 8000254:	f003 021f 	and.w	r2, r3, #31
 8000258:	490a      	ldr	r1, [pc, #40]	; (8000284 <__NVIC_DisableIRQ+0x44>)
 800025a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800025e:	095b      	lsrs	r3, r3, #5
 8000260:	2001      	movs	r0, #1
 8000262:	fa00 f202 	lsl.w	r2, r0, r2
 8000266:	3320      	adds	r3, #32
 8000268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800026c:	f3bf 8f4f 	dsb	sy
}
 8000270:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000272:	f3bf 8f6f 	isb	sy
}
 8000276:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000278:	bf00      	nop
 800027a:	370c      	adds	r7, #12
 800027c:	46bd      	mov	sp, r7
 800027e:	bc80      	pop	{r7}
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	e000e100 	.word	0xe000e100

08000288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000288:	b480      	push	{r7}
 800028a:	b083      	sub	sp, #12
 800028c:	af00      	add	r7, sp, #0
 800028e:	4603      	mov	r3, r0
 8000290:	6039      	str	r1, [r7, #0]
 8000292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000298:	2b00      	cmp	r3, #0
 800029a:	db0a      	blt.n	80002b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029c:	683b      	ldr	r3, [r7, #0]
 800029e:	b2da      	uxtb	r2, r3
 80002a0:	490c      	ldr	r1, [pc, #48]	; (80002d4 <__NVIC_SetPriority+0x4c>)
 80002a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002a6:	0112      	lsls	r2, r2, #4
 80002a8:	b2d2      	uxtb	r2, r2
 80002aa:	440b      	add	r3, r1
 80002ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002b0:	e00a      	b.n	80002c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	b2da      	uxtb	r2, r3
 80002b6:	4908      	ldr	r1, [pc, #32]	; (80002d8 <__NVIC_SetPriority+0x50>)
 80002b8:	79fb      	ldrb	r3, [r7, #7]
 80002ba:	f003 030f 	and.w	r3, r3, #15
 80002be:	3b04      	subs	r3, #4
 80002c0:	0112      	lsls	r2, r2, #4
 80002c2:	b2d2      	uxtb	r2, r2
 80002c4:	440b      	add	r3, r1
 80002c6:	761a      	strb	r2, [r3, #24]
}
 80002c8:	bf00      	nop
 80002ca:	370c      	adds	r7, #12
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bc80      	pop	{r7}
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	e000e100 	.word	0xe000e100
 80002d8:	e000ed00 	.word	0xe000ed00

080002dc <main>:

extern Menu_Level level;
extern SRAM_Tester_t tester;
extern uint8_t wait_for_input;

int main(void) {
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	SystemClock_Config108();
 80002e0:	f000 f876 	bl	80003d0 <SystemClock_Config108>
	FMC_SRAM_Init();
 80002e4:	f000 fcec 	bl	8000cc0 <FMC_SRAM_Init>
	USART3_Console_Init();
 80002e8:	f000 fdf4 	bl	8000ed4 <USART3_Console_Init>
	SRAM_Timer_Init();
 80002ec:	f000 f956 	bl	800059c <SRAM_Timer_Init>

	level = ROOT;
 80002f0:	4b2f      	ldr	r3, [pc, #188]	; (80003b0 <main+0xd4>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	701a      	strb	r2, [r3, #0]
	wait_for_input = 1;
 80002f6:	4b2f      	ldr	r3, [pc, #188]	; (80003b4 <main+0xd8>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	701a      	strb	r2, [r3, #0]

	smallprintf("SRAM memory tester\r\n");
 80002fc:	482e      	ldr	r0, [pc, #184]	; (80003b8 <main+0xdc>)
 80002fe:	f000 fba1 	bl	8000a44 <smallprintf>

	// Set tester to default values:
	tester.mode = 0; 		// Read
 8000302:	4b2e      	ldr	r3, [pc, #184]	; (80003bc <main+0xe0>)
 8000304:	2200      	movs	r2, #0
 8000306:	721a      	strb	r2, [r3, #8]
	tester.size = 256; 		// 256 bytes
 8000308:	4b2c      	ldr	r3, [pc, #176]	; (80003bc <main+0xe0>)
 800030a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800030e:	601a      	str	r2, [r3, #0]
	tester.start = 0; 		// SRAM start, not including bank 1 offset
 8000310:	4b2a      	ldr	r3, [pc, #168]	; (80003bc <main+0xe0>)
 8000312:	2200      	movs	r2, #0
 8000314:	605a      	str	r2, [r3, #4]
	tester.test = 0; 		// Don't test
 8000316:	4b29      	ldr	r3, [pc, #164]	; (80003bc <main+0xe0>)
 8000318:	2200      	movs	r2, #0
 800031a:	725a      	strb	r2, [r3, #9]

	print_menu(&tester);
 800031c:	4827      	ldr	r0, [pc, #156]	; (80003bc <main+0xe0>)
 800031e:	f000 f8fd 	bl	800051c <print_menu>

	NVIC_Init();
 8000322:	f000 f92f 	bl	8000584 <NVIC_Init>

	while(1)  {

		if (wait_for_input == 1) continue;
 8000326:	4b23      	ldr	r3, [pc, #140]	; (80003b4 <main+0xd8>)
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	2b01      	cmp	r3, #1
 800032c:	d03c      	beq.n	80003a8 <main+0xcc>

		switch (level) {
 800032e:	4b20      	ldr	r3, [pc, #128]	; (80003b0 <main+0xd4>)
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	2b04      	cmp	r3, #4
 8000334:	d83a      	bhi.n	80003ac <main+0xd0>
 8000336:	a201      	add	r2, pc, #4	; (adr r2, 800033c <main+0x60>)
 8000338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800033c:	08000351 	.word	0x08000351
 8000340:	0800035f 	.word	0x0800035f
 8000344:	0800036d 	.word	0x0800036d
 8000348:	0800037b 	.word	0x0800037b
 800034c:	08000389 	.word	0x08000389
		case ROOT:
			print_menu(&tester);
 8000350:	481a      	ldr	r0, [pc, #104]	; (80003bc <main+0xe0>)
 8000352:	f000 f8e3 	bl	800051c <print_menu>
			wait_for_input = 1;
 8000356:	4b17      	ldr	r3, [pc, #92]	; (80003b4 <main+0xd8>)
 8000358:	2201      	movs	r2, #1
 800035a:	701a      	strb	r2, [r3, #0]
			break;
 800035c:	e027      	b.n	80003ae <main+0xd2>
		case SIZE:
			smallprintf("\nEnter size (in bytes): ");
 800035e:	4818      	ldr	r0, [pc, #96]	; (80003c0 <main+0xe4>)
 8000360:	f000 fb70 	bl	8000a44 <smallprintf>
			wait_for_input = 1;
 8000364:	4b13      	ldr	r3, [pc, #76]	; (80003b4 <main+0xd8>)
 8000366:	2201      	movs	r2, #1
 8000368:	701a      	strb	r2, [r3, #0]
			break;
 800036a:	e020      	b.n	80003ae <main+0xd2>
		case ADDRESS:
			smallprintf("\nEnter address start (in decimal): ");
 800036c:	4815      	ldr	r0, [pc, #84]	; (80003c4 <main+0xe8>)
 800036e:	f000 fb69 	bl	8000a44 <smallprintf>
			wait_for_input = 1;
 8000372:	4b10      	ldr	r3, [pc, #64]	; (80003b4 <main+0xd8>)
 8000374:	2201      	movs	r2, #1
 8000376:	701a      	strb	r2, [r3, #0]
			break;
 8000378:	e019      	b.n	80003ae <main+0xd2>
		case MODE:
			smallprintf("\nEnter mode (r for Read / w for Write):  ");
 800037a:	4813      	ldr	r0, [pc, #76]	; (80003c8 <main+0xec>)
 800037c:	f000 fb62 	bl	8000a44 <smallprintf>
			wait_for_input = 1;
 8000380:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <main+0xd8>)
 8000382:	2201      	movs	r2, #1
 8000384:	701a      	strb	r2, [r3, #0]
			break;
 8000386:	e012      	b.n	80003ae <main+0xd2>
		case TEST:
			smallprintf("\nTesting RAM...\r\n");
 8000388:	4810      	ldr	r0, [pc, #64]	; (80003cc <main+0xf0>)
 800038a:	f000 fb5b 	bl	8000a44 <smallprintf>

			// Disable USART3 interruptions
			NVIC_DisableIRQ(USART3_IRQn);
 800038e:	2027      	movs	r0, #39	; 0x27
 8000390:	f7ff ff56 	bl	8000240 <__NVIC_DisableIRQ>

			test_sram(&tester);
 8000394:	4809      	ldr	r0, [pc, #36]	; (80003bc <main+0xe0>)
 8000396:	f000 f92b 	bl	80005f0 <test_sram>

			// Enable USART3 interruptions
			NVIC_EnableIRQ(USART3_IRQn);
 800039a:	2027      	movs	r0, #39	; 0x27
 800039c:	f7ff ff34 	bl	8000208 <__NVIC_EnableIRQ>

			level = ROOT;
 80003a0:	4b03      	ldr	r3, [pc, #12]	; (80003b0 <main+0xd4>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	701a      	strb	r2, [r3, #0]
			break;
 80003a6:	e002      	b.n	80003ae <main+0xd2>
		if (wait_for_input == 1) continue;
 80003a8:	bf00      	nop
 80003aa:	e7bc      	b.n	8000326 <main+0x4a>
		default:
			break;
 80003ac:	bf00      	nop
		if (wait_for_input == 1) continue;
 80003ae:	e7ba      	b.n	8000326 <main+0x4a>
 80003b0:	20000036 	.word	0x20000036
 80003b4:	20000035 	.word	0x20000035
 80003b8:	08001144 	.word	0x08001144
 80003bc:	20000038 	.word	0x20000038
 80003c0:	0800115c 	.word	0x0800115c
 80003c4:	08001178 	.word	0x08001178
 80003c8:	0800119c 	.word	0x0800119c
 80003cc:	080011c8 	.word	0x080011c8

080003d0 <SystemClock_Config108>:
		}
	}
}

static void SystemClock_Config108(void) {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b084      	sub	sp, #16
 80003d4:	af00      	add	r7, sp, #0

	// SYSCLK @ 108MHz
	// PLLM = 4, PLLN = 216, PLLP = 4, PLLQ = 9
	// AHBPRE = /1, APB2PRE = /1, APB1PRE = /2

	uint32_t HSE_timeout = 100000;
 80003d6:	4b4c      	ldr	r3, [pc, #304]	; (8000508 <SystemClock_Config108+0x138>)
 80003d8:	60fb      	str	r3, [r7, #12]
	uint32_t PLL_timeout = 100000;
 80003da:	4b4b      	ldr	r3, [pc, #300]	; (8000508 <SystemClock_Config108+0x138>)
 80003dc:	60bb      	str	r3, [r7, #8]
	uint32_t SW_timeout = 100000;
 80003de:	4b4a      	ldr	r3, [pc, #296]	; (8000508 <SystemClock_Config108+0x138>)
 80003e0:	607b      	str	r3, [r7, #4]

	// HSE bypass, turn on
	RCC->CR |= RCC_CR_HSEBYP;
 80003e2:	4b4a      	ldr	r3, [pc, #296]	; (800050c <SystemClock_Config108+0x13c>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4a49      	ldr	r2, [pc, #292]	; (800050c <SystemClock_Config108+0x13c>)
 80003e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003ec:	6013      	str	r3, [r2, #0]
	RCC->CR |= RCC_CR_HSEON;
 80003ee:	4b47      	ldr	r3, [pc, #284]	; (800050c <SystemClock_Config108+0x13c>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4a46      	ldr	r2, [pc, #280]	; (800050c <SystemClock_Config108+0x13c>)
 80003f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003f8:	6013      	str	r3, [r2, #0]

	while((RCC->CR & RCC_CR_HSERDY) != RCC_CR_HSERDY && HSE_timeout-- > 0);
 80003fa:	bf00      	nop
 80003fc:	4b43      	ldr	r3, [pc, #268]	; (800050c <SystemClock_Config108+0x13c>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000404:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000408:	d004      	beq.n	8000414 <SystemClock_Config108+0x44>
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	1e5a      	subs	r2, r3, #1
 800040e:	60fa      	str	r2, [r7, #12]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d1f3      	bne.n	80003fc <SystemClock_Config108+0x2c>

	// PLLQ = 9
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLQ_Msk;
 8000414:	4b3d      	ldr	r3, [pc, #244]	; (800050c <SystemClock_Config108+0x13c>)
 8000416:	685b      	ldr	r3, [r3, #4]
 8000418:	4a3c      	ldr	r2, [pc, #240]	; (800050c <SystemClock_Config108+0x13c>)
 800041a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800041e:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (0x09 << RCC_PLLCFGR_PLLQ_Pos);
 8000420:	4b3a      	ldr	r3, [pc, #232]	; (800050c <SystemClock_Config108+0x13c>)
 8000422:	685b      	ldr	r3, [r3, #4]
 8000424:	4a39      	ldr	r2, [pc, #228]	; (800050c <SystemClock_Config108+0x13c>)
 8000426:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
 800042a:	6053      	str	r3, [r2, #4]

	// PLLP = 4
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP_Msk;
 800042c:	4b37      	ldr	r3, [pc, #220]	; (800050c <SystemClock_Config108+0x13c>)
 800042e:	685b      	ldr	r3, [r3, #4]
 8000430:	4a36      	ldr	r2, [pc, #216]	; (800050c <SystemClock_Config108+0x13c>)
 8000432:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000436:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (0x01 << RCC_PLLCFGR_PLLP_Pos);
 8000438:	4b34      	ldr	r3, [pc, #208]	; (800050c <SystemClock_Config108+0x13c>)
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	4a33      	ldr	r2, [pc, #204]	; (800050c <SystemClock_Config108+0x13c>)
 800043e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000442:	6053      	str	r3, [r2, #4]

	// PLLN = 216
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLN_Msk;
 8000444:	4b31      	ldr	r3, [pc, #196]	; (800050c <SystemClock_Config108+0x13c>)
 8000446:	685a      	ldr	r2, [r3, #4]
 8000448:	4930      	ldr	r1, [pc, #192]	; (800050c <SystemClock_Config108+0x13c>)
 800044a:	4b31      	ldr	r3, [pc, #196]	; (8000510 <SystemClock_Config108+0x140>)
 800044c:	4013      	ands	r3, r2
 800044e:	604b      	str	r3, [r1, #4]
	RCC->PLLCFGR |= (216 << RCC_PLLCFGR_PLLN_Pos);
 8000450:	4b2e      	ldr	r3, [pc, #184]	; (800050c <SystemClock_Config108+0x13c>)
 8000452:	685b      	ldr	r3, [r3, #4]
 8000454:	4a2d      	ldr	r2, [pc, #180]	; (800050c <SystemClock_Config108+0x13c>)
 8000456:	f443 5358 	orr.w	r3, r3, #13824	; 0x3600
 800045a:	6053      	str	r3, [r2, #4]

	// PLLM = 4
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLM_Msk;
 800045c:	4b2b      	ldr	r3, [pc, #172]	; (800050c <SystemClock_Config108+0x13c>)
 800045e:	685b      	ldr	r3, [r3, #4]
 8000460:	4a2a      	ldr	r2, [pc, #168]	; (800050c <SystemClock_Config108+0x13c>)
 8000462:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000466:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (0x04 << RCC_PLLCFGR_PLLM_Pos);
 8000468:	4b28      	ldr	r3, [pc, #160]	; (800050c <SystemClock_Config108+0x13c>)
 800046a:	685b      	ldr	r3, [r3, #4]
 800046c:	4a27      	ldr	r2, [pc, #156]	; (800050c <SystemClock_Config108+0x13c>)
 800046e:	f043 0304 	orr.w	r3, r3, #4
 8000472:	6053      	str	r3, [r2, #4]

	// Select PLL source (HSE)
	RCC->PLLCFGR |= (0x01 << RCC_PLLCFGR_PLLSRC_Pos);
 8000474:	4b25      	ldr	r3, [pc, #148]	; (800050c <SystemClock_Config108+0x13c>)
 8000476:	685b      	ldr	r3, [r3, #4]
 8000478:	4a24      	ldr	r2, [pc, #144]	; (800050c <SystemClock_Config108+0x13c>)
 800047a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800047e:	6053      	str	r3, [r2, #4]

	// Turn on PLL
	RCC->CR |= RCC_CR_PLLON;
 8000480:	4b22      	ldr	r3, [pc, #136]	; (800050c <SystemClock_Config108+0x13c>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a21      	ldr	r2, [pc, #132]	; (800050c <SystemClock_Config108+0x13c>)
 8000486:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800048a:	6013      	str	r3, [r2, #0]

	while((RCC->CR & RCC_CR_PLLRDY) != RCC_CR_PLLRDY && PLL_timeout-- > 0);
 800048c:	bf00      	nop
 800048e:	4b1f      	ldr	r3, [pc, #124]	; (800050c <SystemClock_Config108+0x13c>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000496:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800049a:	d004      	beq.n	80004a6 <SystemClock_Config108+0xd6>
 800049c:	68bb      	ldr	r3, [r7, #8]
 800049e:	1e5a      	subs	r2, r3, #1
 80004a0:	60ba      	str	r2, [r7, #8]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d1f3      	bne.n	800048e <SystemClock_Config108+0xbe>

	// Set AHBPRE, APB2PRE to /1 (default), APB1PRE to /2
	RCC->CFGR &= ~(RCC_CFGR_HPRE_Msk | RCC_CFGR_PPRE2_Msk | RCC_CFGR_PPRE1_Msk);
 80004a6:	4b19      	ldr	r3, [pc, #100]	; (800050c <SystemClock_Config108+0x13c>)
 80004a8:	689a      	ldr	r2, [r3, #8]
 80004aa:	4918      	ldr	r1, [pc, #96]	; (800050c <SystemClock_Config108+0x13c>)
 80004ac:	4b19      	ldr	r3, [pc, #100]	; (8000514 <SystemClock_Config108+0x144>)
 80004ae:	4013      	ands	r3, r2
 80004b0:	608b      	str	r3, [r1, #8]
	RCC->CFGR |= (0x04 << RCC_CFGR_PPRE1_Pos);
 80004b2:	4b16      	ldr	r3, [pc, #88]	; (800050c <SystemClock_Config108+0x13c>)
 80004b4:	689b      	ldr	r3, [r3, #8]
 80004b6:	4a15      	ldr	r2, [pc, #84]	; (800050c <SystemClock_Config108+0x13c>)
 80004b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004bc:	6093      	str	r3, [r2, #8]

	// Configure flash latency for 108MHz and enable instruction pre-fetch
	FLASH->ACR |= FLASH_ACR_PRFTEN | (0x03 << FLASH_ACR_LATENCY_Pos);
 80004be:	4b16      	ldr	r3, [pc, #88]	; (8000518 <SystemClock_Config108+0x148>)
 80004c0:	681a      	ldr	r2, [r3, #0]
 80004c2:	4915      	ldr	r1, [pc, #84]	; (8000518 <SystemClock_Config108+0x148>)
 80004c4:	f240 1303 	movw	r3, #259	; 0x103
 80004c8:	4313      	orrs	r3, r2
 80004ca:	600b      	str	r3, [r1, #0]

	// Select PLL as system clock
	RCC->CFGR &= ~RCC_CFGR_SW_Msk;
 80004cc:	4b0f      	ldr	r3, [pc, #60]	; (800050c <SystemClock_Config108+0x13c>)
 80004ce:	689b      	ldr	r3, [r3, #8]
 80004d0:	4a0e      	ldr	r2, [pc, #56]	; (800050c <SystemClock_Config108+0x13c>)
 80004d2:	f023 0303 	bic.w	r3, r3, #3
 80004d6:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (0x02 << RCC_CFGR_SW_Pos);
 80004d8:	4b0c      	ldr	r3, [pc, #48]	; (800050c <SystemClock_Config108+0x13c>)
 80004da:	689b      	ldr	r3, [r3, #8]
 80004dc:	4a0b      	ldr	r2, [pc, #44]	; (800050c <SystemClock_Config108+0x13c>)
 80004de:	f043 0302 	orr.w	r3, r3, #2
 80004e2:	6093      	str	r3, [r2, #8]

	while ((RCC->CFGR & RCC_CFGR_SWS) != (0x02 << RCC_CFGR_SWS_Pos) && SW_timeout-- > 0);
 80004e4:	bf00      	nop
 80004e6:	4b09      	ldr	r3, [pc, #36]	; (800050c <SystemClock_Config108+0x13c>)
 80004e8:	689b      	ldr	r3, [r3, #8]
 80004ea:	f003 030c 	and.w	r3, r3, #12
 80004ee:	2b08      	cmp	r3, #8
 80004f0:	d004      	beq.n	80004fc <SystemClock_Config108+0x12c>
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	1e5a      	subs	r2, r3, #1
 80004f6:	607a      	str	r2, [r7, #4]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d1f4      	bne.n	80004e6 <SystemClock_Config108+0x116>

	// Update global variables
	SystemCoreClockUpdate();
 80004fc:	f000 fd72 	bl	8000fe4 <SystemCoreClockUpdate>
}
 8000500:	bf00      	nop
 8000502:	3710      	adds	r7, #16
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	000186a0 	.word	0x000186a0
 800050c:	40023800 	.word	0x40023800
 8000510:	ffff803f 	.word	0xffff803f
 8000514:	ffff030f 	.word	0xffff030f
 8000518:	40023c00 	.word	0x40023c00

0800051c <print_menu>:


void print_menu(const SRAM_Tester_t* tester) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	smallprintf("\r\nEnter one of the following letters:\r\n");
 8000524:	4810      	ldr	r0, [pc, #64]	; (8000568 <print_menu+0x4c>)
 8000526:	f000 fa8d 	bl	8000a44 <smallprintf>
	smallprintf("\tS or s - set size (current = %u byte(s))\r\n", tester->size);
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4619      	mov	r1, r3
 8000530:	480e      	ldr	r0, [pc, #56]	; (800056c <print_menu+0x50>)
 8000532:	f000 fa87 	bl	8000a44 <smallprintf>
	smallprintf("\tA or a - set SRAM address start (current = 0x%X)\r\n", tester->start);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	685b      	ldr	r3, [r3, #4]
 800053a:	4619      	mov	r1, r3
 800053c:	480c      	ldr	r0, [pc, #48]	; (8000570 <print_menu+0x54>)
 800053e:	f000 fa81 	bl	8000a44 <smallprintf>
	smallprintf("\tM or m - perform a read / write operation (current = %s)\r\n", (tester->mode == 0) ? "Read" : "Write" );
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	7a1b      	ldrb	r3, [r3, #8]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d101      	bne.n	800054e <print_menu+0x32>
 800054a:	4b0a      	ldr	r3, [pc, #40]	; (8000574 <print_menu+0x58>)
 800054c:	e000      	b.n	8000550 <print_menu+0x34>
 800054e:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <print_menu+0x5c>)
 8000550:	4619      	mov	r1, r3
 8000552:	480a      	ldr	r0, [pc, #40]	; (800057c <print_menu+0x60>)
 8000554:	f000 fa76 	bl	8000a44 <smallprintf>
	smallprintf("\tT or t - test the SRAM with current settings\r\n");
 8000558:	4809      	ldr	r0, [pc, #36]	; (8000580 <print_menu+0x64>)
 800055a:	f000 fa73 	bl	8000a44 <smallprintf>
}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	080011dc 	.word	0x080011dc
 800056c:	08001204 	.word	0x08001204
 8000570:	08001230 	.word	0x08001230
 8000574:	08001264 	.word	0x08001264
 8000578:	0800126c 	.word	0x0800126c
 800057c:	08001274 	.word	0x08001274
 8000580:	080012b0 	.word	0x080012b0

08000584 <NVIC_Init>:

void NVIC_Init(void) {
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	NVIC_SetPriority(USART3_IRQn, 25);
 8000588:	2119      	movs	r1, #25
 800058a:	2027      	movs	r0, #39	; 0x27
 800058c:	f7ff fe7c 	bl	8000288 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART3_IRQn);
 8000590:	2027      	movs	r0, #39	; 0x27
 8000592:	f7ff fe39 	bl	8000208 <__NVIC_EnableIRQ>
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
	...

0800059c <SRAM_Timer_Init>:

void SRAM_Timer_Init(void) {
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
	 * Timer 6 running at 108MHz
	 * 1us resolution (measure up to 65ms)
	 */

	// Enable Timer 6 clock
	RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 80005a0:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <SRAM_Timer_Init+0x4c>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	4a10      	ldr	r2, [pc, #64]	; (80005e8 <SRAM_Timer_Init+0x4c>)
 80005a6:	f043 0310 	orr.w	r3, r3, #16
 80005aa:	6413      	str	r3, [r2, #64]	; 0x40

	// Reset timer 6 configuration
	TIM6->CR1 = 0x0000;
 80005ac:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <SRAM_Timer_Init+0x50>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
	TIM6->CR2 = 0x0000;
 80005b2:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <SRAM_Timer_Init+0x50>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	605a      	str	r2, [r3, #4]
	TIM6->ARR = (uint16_t)0xFFFF;
 80005b8:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <SRAM_Timer_Init+0x50>)
 80005ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005be:	62da      	str	r2, [r3, #44]	; 0x2c

	// Enable auto-reload
	TIM6->CR1 |= TIM_CR1_ARPE;
 80005c0:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <SRAM_Timer_Init+0x50>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a09      	ldr	r2, [pc, #36]	; (80005ec <SRAM_Timer_Init+0x50>)
 80005c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005ca:	6013      	str	r3, [r2, #0]

	// Set pre-scaler for 1MHz counting frequency
	TIM6->PSC = (uint16_t)108 -1;
 80005cc:	4b07      	ldr	r3, [pc, #28]	; (80005ec <SRAM_Timer_Init+0x50>)
 80005ce:	226b      	movs	r2, #107	; 0x6b
 80005d0:	629a      	str	r2, [r3, #40]	; 0x28

	// Make sure that counter is disabled
	TIM6->CR1 &= ~TIM_CR1_CEN;
 80005d2:	4b06      	ldr	r3, [pc, #24]	; (80005ec <SRAM_Timer_Init+0x50>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a05      	ldr	r2, [pc, #20]	; (80005ec <SRAM_Timer_Init+0x50>)
 80005d8:	f023 0301 	bic.w	r3, r3, #1
 80005dc:	6013      	str	r3, [r2, #0]
}
 80005de:	bf00      	nop
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc80      	pop	{r7}
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40001000 	.word	0x40001000

080005f0 <test_sram>:

#define COPY_VALUE 0x55

void test_sram(const SRAM_Tester_t* tester) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]

	volatile uint8_t sram_read = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	72fb      	strb	r3, [r7, #11]
	uint16_t cnt = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	82fb      	strh	r3, [r7, #22]

	// Reset TIM6 counter
	TIM6->EGR |= TIM_EGR_UG;
 8000600:	4b31      	ldr	r3, [pc, #196]	; (80006c8 <test_sram+0xd8>)
 8000602:	695b      	ldr	r3, [r3, #20]
 8000604:	4a30      	ldr	r2, [pc, #192]	; (80006c8 <test_sram+0xd8>)
 8000606:	f043 0301 	orr.w	r3, r3, #1
 800060a:	6153      	str	r3, [r2, #20]

	if (tester->mode == 0) {
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	7a1b      	ldrb	r3, [r3, #8]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d129      	bne.n	8000668 <test_sram+0x78>

		// Start counting
		TIM6->CR1 |= TIM_CR1_CEN;
 8000614:	4b2c      	ldr	r3, [pc, #176]	; (80006c8 <test_sram+0xd8>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a2b      	ldr	r2, [pc, #172]	; (80006c8 <test_sram+0xd8>)
 800061a:	f043 0301 	orr.w	r3, r3, #1
 800061e:	6013      	str	r3, [r2, #0]

		for (uint32_t i = 0; i < tester->size; i++) {
 8000620:	2300      	movs	r3, #0
 8000622:	613b      	str	r3, [r7, #16]
 8000624:	e00b      	b.n	800063e <test_sram+0x4e>
			sram_read = (uint8_t) *(volatile uint32_t*)(BANK1_ADDR_START + tester->start + i);
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	685a      	ldr	r2, [r3, #4]
 800062a:	693b      	ldr	r3, [r7, #16]
 800062c:	4413      	add	r3, r2
 800062e:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	b2db      	uxtb	r3, r3
 8000636:	72fb      	strb	r3, [r7, #11]
		for (uint32_t i = 0; i < tester->size; i++) {
 8000638:	693b      	ldr	r3, [r7, #16]
 800063a:	3301      	adds	r3, #1
 800063c:	613b      	str	r3, [r7, #16]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	693a      	ldr	r2, [r7, #16]
 8000644:	429a      	cmp	r2, r3
 8000646:	d3ee      	bcc.n	8000626 <test_sram+0x36>
		}

		// Get counter value
		cnt = TIM6->CNT;
 8000648:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <test_sram+0xd8>)
 800064a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800064c:	82fb      	strh	r3, [r7, #22]

		// Stop counting
		TIM6->CR1 &= ~TIM_CR1_CEN;
 800064e:	4b1e      	ldr	r3, [pc, #120]	; (80006c8 <test_sram+0xd8>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a1d      	ldr	r2, [pc, #116]	; (80006c8 <test_sram+0xd8>)
 8000654:	f023 0301 	bic.w	r3, r3, #1
 8000658:	6013      	str	r3, [r2, #0]

		smallprintf("sram_read = %u\r\n", sram_read);
 800065a:	7afb      	ldrb	r3, [r7, #11]
 800065c:	b2db      	uxtb	r3, r3
 800065e:	4619      	mov	r1, r3
 8000660:	481a      	ldr	r0, [pc, #104]	; (80006cc <test_sram+0xdc>)
 8000662:	f000 f9ef 	bl	8000a44 <smallprintf>
 8000666:	e026      	b.n	80006b6 <test_sram+0xc6>
	}

	else if (tester->mode == 1) {
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	7a1b      	ldrb	r3, [r3, #8]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d122      	bne.n	80006b6 <test_sram+0xc6>

		// Start counting
		TIM6->CR1 |= TIM_CR1_CEN;
 8000670:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <test_sram+0xd8>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a14      	ldr	r2, [pc, #80]	; (80006c8 <test_sram+0xd8>)
 8000676:	f043 0301 	orr.w	r3, r3, #1
 800067a:	6013      	str	r3, [r2, #0]

		for (uint32_t i = 0; i < tester->size; i++) {
 800067c:	2300      	movs	r3, #0
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	e00b      	b.n	800069a <test_sram+0xaa>
			*(volatile uint32_t*)(BANK1_ADDR_START + tester->start + i) = (uint8_t)COPY_VALUE;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	685a      	ldr	r2, [r3, #4]
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	4413      	add	r3, r2
 800068a:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
 800068e:	461a      	mov	r2, r3
 8000690:	2355      	movs	r3, #85	; 0x55
 8000692:	6013      	str	r3, [r2, #0]
		for (uint32_t i = 0; i < tester->size; i++) {
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	3301      	adds	r3, #1
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	68fa      	ldr	r2, [r7, #12]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d3ee      	bcc.n	8000682 <test_sram+0x92>
		}

		// Get counter value
		cnt = TIM6->CNT;
 80006a4:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <test_sram+0xd8>)
 80006a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a8:	82fb      	strh	r3, [r7, #22]

		// Stop counting
		TIM6->CR1 &= ~TIM_CR1_CEN;
 80006aa:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <test_sram+0xd8>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a06      	ldr	r2, [pc, #24]	; (80006c8 <test_sram+0xd8>)
 80006b0:	f023 0301 	bic.w	r3, r3, #1
 80006b4:	6013      	str	r3, [r2, #0]

	}

	smallprintf("Done : took %u us\r\n", cnt);
 80006b6:	8afb      	ldrh	r3, [r7, #22]
 80006b8:	4619      	mov	r1, r3
 80006ba:	4805      	ldr	r0, [pc, #20]	; (80006d0 <test_sram+0xe0>)
 80006bc:	f000 f9c2 	bl	8000a44 <smallprintf>
}
 80006c0:	bf00      	nop
 80006c2:	3718      	adds	r7, #24
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40001000 	.word	0x40001000
 80006cc:	080012e0 	.word	0x080012e0
 80006d0:	080012f4 	.word	0x080012f4

080006d4 <printchar>:
#include "stm32f7xx.h"

#define USART_DEVICE USART3

static void printchar(char **str, int c)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	6039      	str	r1, [r7, #0]
	extern int putchar(int c);
	if (str) {
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d00a      	beq.n	80006fa <printchar+0x26>
		**str = c;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	683a      	ldr	r2, [r7, #0]
 80006ea:	b2d2      	uxtb	r2, r2
 80006ec:	701a      	strb	r2, [r3, #0]
		++(*str);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	1c5a      	adds	r2, r3, #1
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	601a      	str	r2, [r3, #0]
	}
	else {
		while((USART_DEVICE->ISR & USART_ISR_TC) != USART_ISR_TC);
		USART_DEVICE->TDR = c;
	}
}
 80006f8:	e009      	b.n	800070e <printchar+0x3a>
		while((USART_DEVICE->ISR & USART_ISR_TC) != USART_ISR_TC);
 80006fa:	bf00      	nop
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <printchar+0x44>)
 80006fe:	69db      	ldr	r3, [r3, #28]
 8000700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000704:	2b40      	cmp	r3, #64	; 0x40
 8000706:	d1f9      	bne.n	80006fc <printchar+0x28>
		USART_DEVICE->TDR = c;
 8000708:	4a03      	ldr	r2, [pc, #12]	; (8000718 <printchar+0x44>)
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	6293      	str	r3, [r2, #40]	; 0x28
}
 800070e:	bf00      	nop
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr
 8000718:	40004800 	.word	0x40004800

0800071c <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 800071c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000720:	b084      	sub	sp, #16
 8000722:	af00      	add	r7, sp, #0
 8000724:	60f8      	str	r0, [r7, #12]
 8000726:	60b9      	str	r1, [r7, #8]
 8000728:	607a      	str	r2, [r7, #4]
 800072a:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 800072c:	2400      	movs	r4, #0
 800072e:	f04f 0820 	mov.w	r8, #32

	if (width > 0) {
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2b00      	cmp	r3, #0
 8000736:	dd17      	ble.n	8000768 <prints+0x4c>
		register int len = 0;
 8000738:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 800073a:	68be      	ldr	r6, [r7, #8]
 800073c:	e001      	b.n	8000742 <prints+0x26>
 800073e:	3501      	adds	r5, #1
 8000740:	3601      	adds	r6, #1
 8000742:	7833      	ldrb	r3, [r6, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d1fa      	bne.n	800073e <prints+0x22>
		if (len >= width) width = 0;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	429d      	cmp	r5, r3
 800074c:	db02      	blt.n	8000754 <prints+0x38>
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	e002      	b.n	800075a <prints+0x3e>
		else width -= len;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	1b5b      	subs	r3, r3, r5
 8000758:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	f003 0302 	and.w	r3, r3, #2
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <prints+0x4c>
 8000764:	f04f 0830 	mov.w	r8, #48	; 0x30
	}
	if (!(pad & PAD_RIGHT)) {
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	2b00      	cmp	r3, #0
 8000770:	d116      	bne.n	80007a0 <prints+0x84>
		for ( ; width > 0; --width) {
 8000772:	e007      	b.n	8000784 <prints+0x68>
			printchar (out, padchar);
 8000774:	4641      	mov	r1, r8
 8000776:	68f8      	ldr	r0, [r7, #12]
 8000778:	f7ff ffac 	bl	80006d4 <printchar>
			++pc;
 800077c:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	3b01      	subs	r3, #1
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b00      	cmp	r3, #0
 8000788:	dcf4      	bgt.n	8000774 <prints+0x58>
		}
	}
	for ( ; *string ; ++string) {
 800078a:	e009      	b.n	80007a0 <prints+0x84>
		printchar (out, *string);
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	4619      	mov	r1, r3
 8000792:	68f8      	ldr	r0, [r7, #12]
 8000794:	f7ff ff9e 	bl	80006d4 <printchar>
		++pc;
 8000798:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	3301      	adds	r3, #1
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d1f1      	bne.n	800078c <prints+0x70>
	}
	for ( ; width > 0; --width) {
 80007a8:	e007      	b.n	80007ba <prints+0x9e>
		printchar (out, padchar);
 80007aa:	4641      	mov	r1, r8
 80007ac:	68f8      	ldr	r0, [r7, #12]
 80007ae:	f7ff ff91 	bl	80006d4 <printchar>
		++pc;
 80007b2:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	3b01      	subs	r3, #1
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	dcf4      	bgt.n	80007aa <prints+0x8e>
	}

	return pc;
 80007c0:	4623      	mov	r3, r4
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3710      	adds	r7, #16
 80007c6:	46bd      	mov	sp, r7
 80007c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080007cc <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 80007cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80007d0:	b089      	sub	sp, #36	; 0x24
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	60f8      	str	r0, [r7, #12]
 80007d6:	60b9      	str	r1, [r7, #8]
 80007d8:	607a      	str	r2, [r7, #4]
 80007da:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 80007dc:	f04f 0900 	mov.w	r9, #0
 80007e0:	2600      	movs	r6, #0
	register unsigned int u = i;
 80007e2:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d10c      	bne.n	8000804 <printi+0x38>
		print_buf[0] = '0';
 80007ea:	2330      	movs	r3, #48	; 0x30
 80007ec:	753b      	strb	r3, [r7, #20]
		print_buf[1] = '\0';
 80007ee:	2300      	movs	r3, #0
 80007f0:	757b      	strb	r3, [r7, #21]
		return prints (out, print_buf, width, pad);
 80007f2:	f107 0114 	add.w	r1, r7, #20
 80007f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80007fa:	68f8      	ldr	r0, [r7, #12]
 80007fc:	f7ff ff8e 	bl	800071c <prints>
 8000800:	4603      	mov	r3, r0
 8000802:	e04a      	b.n	800089a <printi+0xce>
	}

	if (sg && b == 10 && i < 0) {
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d00a      	beq.n	8000820 <printi+0x54>
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2b0a      	cmp	r3, #10
 800080e:	d107      	bne.n	8000820 <printi+0x54>
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	2b00      	cmp	r3, #0
 8000814:	da04      	bge.n	8000820 <printi+0x54>
		neg = 1;
 8000816:	f04f 0901 	mov.w	r9, #1
		u = -i;
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	425b      	negs	r3, r3
 800081e:	461d      	mov	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
 8000820:	f107 0414 	add.w	r4, r7, #20
 8000824:	340b      	adds	r4, #11
	*s = '\0';
 8000826:	2300      	movs	r3, #0
 8000828:	7023      	strb	r3, [r4, #0]

	while (u) {
 800082a:	e015      	b.n	8000858 <printi+0x8c>
		t = u % b;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	fbb5 f2f3 	udiv	r2, r5, r3
 8000832:	fb02 f303 	mul.w	r3, r2, r3
 8000836:	1aeb      	subs	r3, r5, r3
 8000838:	4698      	mov	r8, r3
		if( t >= 10 )
 800083a:	f1b8 0f09 	cmp.w	r8, #9
 800083e:	dd02      	ble.n	8000846 <printi+0x7a>
			t += letbase - '0' - 10;
 8000840:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000842:	3b3a      	subs	r3, #58	; 0x3a
 8000844:	4498      	add	r8, r3
		*--s = t + '0';
 8000846:	fa5f f388 	uxtb.w	r3, r8
 800084a:	3c01      	subs	r4, #1
 800084c:	3330      	adds	r3, #48	; 0x30
 800084e:	b2db      	uxtb	r3, r3
 8000850:	7023      	strb	r3, [r4, #0]
		u /= b;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	fbb5 f5f3 	udiv	r5, r5, r3
	while (u) {
 8000858:	2d00      	cmp	r5, #0
 800085a:	d1e7      	bne.n	800082c <printi+0x60>
	}

	if (neg) {
 800085c:	f1b9 0f00 	cmp.w	r9, #0
 8000860:	d013      	beq.n	800088a <printi+0xbe>
		if( width && (pad & PAD_ZERO) ) {
 8000862:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000864:	2b00      	cmp	r3, #0
 8000866:	d00d      	beq.n	8000884 <printi+0xb8>
 8000868:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	2b00      	cmp	r3, #0
 8000870:	d008      	beq.n	8000884 <printi+0xb8>
			printchar (out, '-');
 8000872:	212d      	movs	r1, #45	; 0x2d
 8000874:	68f8      	ldr	r0, [r7, #12]
 8000876:	f7ff ff2d 	bl	80006d4 <printchar>
			++pc;
 800087a:	3601      	adds	r6, #1
			--width;
 800087c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800087e:	3b01      	subs	r3, #1
 8000880:	643b      	str	r3, [r7, #64]	; 0x40
 8000882:	e002      	b.n	800088a <printi+0xbe>
		}
		else {
			*--s = '-';
 8000884:	3c01      	subs	r4, #1
 8000886:	232d      	movs	r3, #45	; 0x2d
 8000888:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints (out, s, width, pad);
 800088a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800088c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800088e:	4621      	mov	r1, r4
 8000890:	68f8      	ldr	r0, [r7, #12]
 8000892:	f7ff ff43 	bl	800071c <prints>
 8000896:	4603      	mov	r3, r0
 8000898:	4433      	add	r3, r6
}
 800089a:	4618      	mov	r0, r3
 800089c:	3724      	adds	r7, #36	; 0x24
 800089e:	46bd      	mov	sp, r7
 80008a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080008a4 <print>:

static int print(char **out, int *varg)
{
 80008a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008a6:	b089      	sub	sp, #36	; 0x24
 80008a8:	af04      	add	r7, sp, #16
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	6039      	str	r1, [r7, #0]
	register int width, pad;
	register int pc = 0;
 80008ae:	2500      	movs	r5, #0
	register char *format = (char *)(*varg++);
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	1d1a      	adds	r2, r3, #4
 80008b4:	603a      	str	r2, [r7, #0]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	461c      	mov	r4, r3
	char scr[2];

	for (; *format != 0; ++format) {
 80008ba:	e0af      	b.n	8000a1c <print+0x178>
		if (*format == '%') {
 80008bc:	7823      	ldrb	r3, [r4, #0]
 80008be:	2b25      	cmp	r3, #37	; 0x25
 80008c0:	f040 80a2 	bne.w	8000a08 <print+0x164>
			++format;
 80008c4:	3401      	adds	r4, #1
			width = pad = 0;
 80008c6:	2600      	movs	r6, #0
 80008c8:	4630      	mov	r0, r6
			if (*format == '\0') break;
 80008ca:	7823      	ldrb	r3, [r4, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	f000 80aa 	beq.w	8000a26 <print+0x182>
			if (*format == '%') goto out;
 80008d2:	7823      	ldrb	r3, [r4, #0]
 80008d4:	2b25      	cmp	r3, #37	; 0x25
 80008d6:	f000 8099 	beq.w	8000a0c <print+0x168>
			if (*format == '-') {
 80008da:	7823      	ldrb	r3, [r4, #0]
 80008dc:	2b2d      	cmp	r3, #45	; 0x2d
 80008de:	d108      	bne.n	80008f2 <print+0x4e>
				++format;
 80008e0:	3401      	adds	r4, #1
				pad = PAD_RIGHT;
 80008e2:	2301      	movs	r3, #1
 80008e4:	4618      	mov	r0, r3
			}
			while (*format == '0') {
 80008e6:	e004      	b.n	80008f2 <print+0x4e>
				++format;
 80008e8:	3401      	adds	r4, #1
				pad |= PAD_ZERO;
 80008ea:	4603      	mov	r3, r0
 80008ec:	f043 0302 	orr.w	r3, r3, #2
 80008f0:	4618      	mov	r0, r3
			while (*format == '0') {
 80008f2:	7823      	ldrb	r3, [r4, #0]
 80008f4:	2b30      	cmp	r3, #48	; 0x30
 80008f6:	d0f7      	beq.n	80008e8 <print+0x44>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 80008f8:	e008      	b.n	800090c <print+0x68>
				width *= 10;
 80008fa:	4633      	mov	r3, r6
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	4433      	add	r3, r6
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	461e      	mov	r6, r3
				width += *format - '0';
 8000904:	7823      	ldrb	r3, [r4, #0]
 8000906:	3b30      	subs	r3, #48	; 0x30
 8000908:	441e      	add	r6, r3
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 800090a:	3401      	adds	r4, #1
 800090c:	7823      	ldrb	r3, [r4, #0]
 800090e:	2b2f      	cmp	r3, #47	; 0x2f
 8000910:	d902      	bls.n	8000918 <print+0x74>
 8000912:	7823      	ldrb	r3, [r4, #0]
 8000914:	2b39      	cmp	r3, #57	; 0x39
 8000916:	d9f0      	bls.n	80008fa <print+0x56>
			}
			if( *format == 's' ) {
 8000918:	7823      	ldrb	r3, [r4, #0]
 800091a:	2b73      	cmp	r3, #115	; 0x73
 800091c:	d10f      	bne.n	800093e <print+0x9a>
				register char *s = *((char **)varg++);
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	1d1a      	adds	r2, r3, #4
 8000922:	603a      	str	r2, [r7, #0]
 8000924:	6819      	ldr	r1, [r3, #0]
				pc += prints (out, s?s:"(null)", width, pad);
 8000926:	2900      	cmp	r1, #0
 8000928:	d000      	beq.n	800092c <print+0x88>
 800092a:	e000      	b.n	800092e <print+0x8a>
 800092c:	4944      	ldr	r1, [pc, #272]	; (8000a40 <print+0x19c>)
 800092e:	4603      	mov	r3, r0
 8000930:	4632      	mov	r2, r6
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f7ff fef2 	bl	800071c <prints>
 8000938:	4603      	mov	r3, r0
 800093a:	441d      	add	r5, r3
				continue;
 800093c:	e06d      	b.n	8000a1a <print+0x176>
			}
			if( *format == 'd' ) {
 800093e:	7823      	ldrb	r3, [r4, #0]
 8000940:	2b64      	cmp	r3, #100	; 0x64
 8000942:	d110      	bne.n	8000966 <print+0xc2>
				pc += printi (out, *varg++, 10, 1, width, pad, 'a');
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	1d1a      	adds	r2, r3, #4
 8000948:	603a      	str	r2, [r7, #0]
 800094a:	6819      	ldr	r1, [r3, #0]
 800094c:	2361      	movs	r3, #97	; 0x61
 800094e:	9302      	str	r3, [sp, #8]
 8000950:	4603      	mov	r3, r0
 8000952:	9301      	str	r3, [sp, #4]
 8000954:	9600      	str	r6, [sp, #0]
 8000956:	2301      	movs	r3, #1
 8000958:	220a      	movs	r2, #10
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f7ff ff36 	bl	80007cc <printi>
 8000960:	4603      	mov	r3, r0
 8000962:	441d      	add	r5, r3
				continue;
 8000964:	e059      	b.n	8000a1a <print+0x176>
			}
			if( *format == 'x' ) {
 8000966:	7823      	ldrb	r3, [r4, #0]
 8000968:	2b78      	cmp	r3, #120	; 0x78
 800096a:	d110      	bne.n	800098e <print+0xea>
				pc += printi (out, *varg++, 16, 0, width, pad, 'a');
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	1d1a      	adds	r2, r3, #4
 8000970:	603a      	str	r2, [r7, #0]
 8000972:	6819      	ldr	r1, [r3, #0]
 8000974:	2361      	movs	r3, #97	; 0x61
 8000976:	9302      	str	r3, [sp, #8]
 8000978:	4603      	mov	r3, r0
 800097a:	9301      	str	r3, [sp, #4]
 800097c:	9600      	str	r6, [sp, #0]
 800097e:	2300      	movs	r3, #0
 8000980:	2210      	movs	r2, #16
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f7ff ff22 	bl	80007cc <printi>
 8000988:	4603      	mov	r3, r0
 800098a:	441d      	add	r5, r3
				continue;
 800098c:	e045      	b.n	8000a1a <print+0x176>
			}
			if( *format == 'X' ) {
 800098e:	7823      	ldrb	r3, [r4, #0]
 8000990:	2b58      	cmp	r3, #88	; 0x58
 8000992:	d110      	bne.n	80009b6 <print+0x112>
				pc += printi (out, *varg++, 16, 0, width, pad, 'A');
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	1d1a      	adds	r2, r3, #4
 8000998:	603a      	str	r2, [r7, #0]
 800099a:	6819      	ldr	r1, [r3, #0]
 800099c:	2341      	movs	r3, #65	; 0x41
 800099e:	9302      	str	r3, [sp, #8]
 80009a0:	4603      	mov	r3, r0
 80009a2:	9301      	str	r3, [sp, #4]
 80009a4:	9600      	str	r6, [sp, #0]
 80009a6:	2300      	movs	r3, #0
 80009a8:	2210      	movs	r2, #16
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff ff0e 	bl	80007cc <printi>
 80009b0:	4603      	mov	r3, r0
 80009b2:	441d      	add	r5, r3
				continue;
 80009b4:	e031      	b.n	8000a1a <print+0x176>
			}
			if( *format == 'u' ) {
 80009b6:	7823      	ldrb	r3, [r4, #0]
 80009b8:	2b75      	cmp	r3, #117	; 0x75
 80009ba:	d110      	bne.n	80009de <print+0x13a>
				pc += printi (out, *varg++, 10, 0, width, pad, 'a');
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	1d1a      	adds	r2, r3, #4
 80009c0:	603a      	str	r2, [r7, #0]
 80009c2:	6819      	ldr	r1, [r3, #0]
 80009c4:	2361      	movs	r3, #97	; 0x61
 80009c6:	9302      	str	r3, [sp, #8]
 80009c8:	4603      	mov	r3, r0
 80009ca:	9301      	str	r3, [sp, #4]
 80009cc:	9600      	str	r6, [sp, #0]
 80009ce:	2300      	movs	r3, #0
 80009d0:	220a      	movs	r2, #10
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f7ff fefa 	bl	80007cc <printi>
 80009d8:	4603      	mov	r3, r0
 80009da:	441d      	add	r5, r3
				continue;
 80009dc:	e01d      	b.n	8000a1a <print+0x176>
			}
			if( *format == 'c' ) {
 80009de:	7823      	ldrb	r3, [r4, #0]
 80009e0:	2b63      	cmp	r3, #99	; 0x63
 80009e2:	d11a      	bne.n	8000a1a <print+0x176>
				/* char are converted to int then pushed on the stack */
				scr[0] = *varg++;
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	1d1a      	adds	r2, r3, #4
 80009e8:	603a      	str	r2, [r7, #0]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	733b      	strb	r3, [r7, #12]
				scr[1] = '\0';
 80009f0:	2300      	movs	r3, #0
 80009f2:	737b      	strb	r3, [r7, #13]
				pc += prints (out, scr, width, pad);
 80009f4:	f107 010c 	add.w	r1, r7, #12
 80009f8:	4603      	mov	r3, r0
 80009fa:	4632      	mov	r2, r6
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f7ff fe8d 	bl	800071c <prints>
 8000a02:	4603      	mov	r3, r0
 8000a04:	441d      	add	r5, r3
				continue;
 8000a06:	e008      	b.n	8000a1a <print+0x176>
			}
		}
		else {
		out:
 8000a08:	bf00      	nop
 8000a0a:	e000      	b.n	8000a0e <print+0x16a>
			if (*format == '%') goto out;
 8000a0c:	bf00      	nop
			printchar (out, *format);
 8000a0e:	7823      	ldrb	r3, [r4, #0]
 8000a10:	4619      	mov	r1, r3
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f7ff fe5e 	bl	80006d4 <printchar>
			++pc;
 8000a18:	3501      	adds	r5, #1
	for (; *format != 0; ++format) {
 8000a1a:	3401      	adds	r4, #1
 8000a1c:	7823      	ldrb	r3, [r4, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	f47f af4c 	bne.w	80008bc <print+0x18>
 8000a24:	e000      	b.n	8000a28 <print+0x184>
			if (*format == '\0') break;
 8000a26:	bf00      	nop
		}
	}
	if (out) **out = '\0';
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d003      	beq.n	8000a36 <print+0x192>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2200      	movs	r2, #0
 8000a34:	701a      	strb	r2, [r3, #0]
	return pc;
 8000a36:	462b      	mov	r3, r5
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3714      	adds	r7, #20
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a40:	08001308 	.word	0x08001308

08000a44 <smallprintf>:

/* assuming sizeof(void *) == sizeof(int) */

int smallprintf(const char *format, ...)
{
 8000a44:	b40f      	push	{r0, r1, r2, r3}
 8000a46:	b598      	push	{r3, r4, r7, lr}
 8000a48:	af00      	add	r7, sp, #0
	register int *varg = (int *)(&format);
 8000a4a:	f107 0410 	add.w	r4, r7, #16
	return print(0, varg);
 8000a4e:	4621      	mov	r1, r4
 8000a50:	2000      	movs	r0, #0
 8000a52:	f7ff ff27 	bl	80008a4 <print>
 8000a56:	4603      	mov	r3, r0
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	e8bd 4098 	ldmia.w	sp!, {r3, r4, r7, lr}
 8000a60:	b004      	add	sp, #16
 8000a62:	4770      	bx	lr

08000a64 <atoi>:


Menu_Level level;
SRAM_Tester_t tester;

uint32_t atoi(const char* a, uint8_t len)  {
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	460b      	mov	r3, r1
 8000a6e:	70fb      	strb	r3, [r7, #3]
	uint32_t res = 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < len; i++)
 8000a74:	2300      	movs	r3, #0
 8000a76:	72fb      	strb	r3, [r7, #11]
 8000a78:	e00f      	b.n	8000a9a <atoi+0x36>
		res = (res * 10) + (a[i] - '0');
 8000a7a:	68fa      	ldr	r2, [r7, #12]
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	4413      	add	r3, r2
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	4619      	mov	r1, r3
 8000a86:	7afb      	ldrb	r3, [r7, #11]
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	440b      	add	r3, r1
 8000a90:	3b30      	subs	r3, #48	; 0x30
 8000a92:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < len; i++)
 8000a94:	7afb      	ldrb	r3, [r7, #11]
 8000a96:	3301      	adds	r3, #1
 8000a98:	72fb      	strb	r3, [r7, #11]
 8000a9a:	7afa      	ldrb	r2, [r7, #11]
 8000a9c:	78fb      	ldrb	r3, [r7, #3]
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	d3eb      	bcc.n	8000a7a <atoi+0x16>
	return res;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bc80      	pop	{r7}
 8000aac:	4770      	bx	lr
	...

08000ab0 <USART3_IRQHandler>:

void USART3_IRQHandler(void) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0

	c = (char)USART3->RDR;
 8000ab4:	4b69      	ldr	r3, [pc, #420]	; (8000c5c <USART3_IRQHandler+0x1ac>)
 8000ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	4b69      	ldr	r3, [pc, #420]	; (8000c60 <USART3_IRQHandler+0x1b0>)
 8000abc:	701a      	strb	r2, [r3, #0]

	switch (level) {
 8000abe:	4b69      	ldr	r3, [pc, #420]	; (8000c64 <USART3_IRQHandler+0x1b4>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b03      	cmp	r3, #3
 8000ac4:	f200 80b4 	bhi.w	8000c30 <USART3_IRQHandler+0x180>
 8000ac8:	a201      	add	r2, pc, #4	; (adr r2, 8000ad0 <USART3_IRQHandler+0x20>)
 8000aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ace:	bf00      	nop
 8000ad0:	08000ae1 	.word	0x08000ae1
 8000ad4:	08000bdd 	.word	0x08000bdd
 8000ad8:	08000b89 	.word	0x08000b89
 8000adc:	08000b47 	.word	0x08000b47

	case ROOT:
		wait_for_input = 0;
 8000ae0:	4b61      	ldr	r3, [pc, #388]	; (8000c68 <USART3_IRQHandler+0x1b8>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	701a      	strb	r2, [r3, #0]
		if (c == 's' || c == 'S') { level = SIZE; 		break; }
 8000ae6:	4b5e      	ldr	r3, [pc, #376]	; (8000c60 <USART3_IRQHandler+0x1b0>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b73      	cmp	r3, #115	; 0x73
 8000aec:	d003      	beq.n	8000af6 <USART3_IRQHandler+0x46>
 8000aee:	4b5c      	ldr	r3, [pc, #368]	; (8000c60 <USART3_IRQHandler+0x1b0>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b53      	cmp	r3, #83	; 0x53
 8000af4:	d103      	bne.n	8000afe <USART3_IRQHandler+0x4e>
 8000af6:	4b5b      	ldr	r3, [pc, #364]	; (8000c64 <USART3_IRQHandler+0x1b4>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	701a      	strb	r2, [r3, #0]
 8000afc:	e0a1      	b.n	8000c42 <USART3_IRQHandler+0x192>
		if (c == 'a' || c == 'A') { level = ADDRESS; 	break; }
 8000afe:	4b58      	ldr	r3, [pc, #352]	; (8000c60 <USART3_IRQHandler+0x1b0>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b61      	cmp	r3, #97	; 0x61
 8000b04:	d003      	beq.n	8000b0e <USART3_IRQHandler+0x5e>
 8000b06:	4b56      	ldr	r3, [pc, #344]	; (8000c60 <USART3_IRQHandler+0x1b0>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b41      	cmp	r3, #65	; 0x41
 8000b0c:	d103      	bne.n	8000b16 <USART3_IRQHandler+0x66>
 8000b0e:	4b55      	ldr	r3, [pc, #340]	; (8000c64 <USART3_IRQHandler+0x1b4>)
 8000b10:	2202      	movs	r2, #2
 8000b12:	701a      	strb	r2, [r3, #0]
 8000b14:	e095      	b.n	8000c42 <USART3_IRQHandler+0x192>
		if (c == 'm' || c == 'M') { level = MODE; 		break; }
 8000b16:	4b52      	ldr	r3, [pc, #328]	; (8000c60 <USART3_IRQHandler+0x1b0>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	2b6d      	cmp	r3, #109	; 0x6d
 8000b1c:	d003      	beq.n	8000b26 <USART3_IRQHandler+0x76>
 8000b1e:	4b50      	ldr	r3, [pc, #320]	; (8000c60 <USART3_IRQHandler+0x1b0>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	2b4d      	cmp	r3, #77	; 0x4d
 8000b24:	d103      	bne.n	8000b2e <USART3_IRQHandler+0x7e>
 8000b26:	4b4f      	ldr	r3, [pc, #316]	; (8000c64 <USART3_IRQHandler+0x1b4>)
 8000b28:	2203      	movs	r2, #3
 8000b2a:	701a      	strb	r2, [r3, #0]
 8000b2c:	e089      	b.n	8000c42 <USART3_IRQHandler+0x192>
		if (c == 't' || c == 'T') { level = TEST; 		break; }
 8000b2e:	4b4c      	ldr	r3, [pc, #304]	; (8000c60 <USART3_IRQHandler+0x1b0>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b74      	cmp	r3, #116	; 0x74
 8000b34:	d003      	beq.n	8000b3e <USART3_IRQHandler+0x8e>
 8000b36:	4b4a      	ldr	r3, [pc, #296]	; (8000c60 <USART3_IRQHandler+0x1b0>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b54      	cmp	r3, #84	; 0x54
 8000b3c:	d17a      	bne.n	8000c34 <USART3_IRQHandler+0x184>
 8000b3e:	4b49      	ldr	r3, [pc, #292]	; (8000c64 <USART3_IRQHandler+0x1b4>)
 8000b40:	2204      	movs	r2, #4
 8000b42:	701a      	strb	r2, [r3, #0]
 8000b44:	e07d      	b.n	8000c42 <USART3_IRQHandler+0x192>
		break;

	case MODE:
		wait_for_input = 0;
 8000b46:	4b48      	ldr	r3, [pc, #288]	; (8000c68 <USART3_IRQHandler+0x1b8>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	701a      	strb	r2, [r3, #0]
		if (c == 'r' || c == 'R') { tester.mode = 0; level = ROOT; break; }
 8000b4c:	4b44      	ldr	r3, [pc, #272]	; (8000c60 <USART3_IRQHandler+0x1b0>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b72      	cmp	r3, #114	; 0x72
 8000b52:	d003      	beq.n	8000b5c <USART3_IRQHandler+0xac>
 8000b54:	4b42      	ldr	r3, [pc, #264]	; (8000c60 <USART3_IRQHandler+0x1b0>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b52      	cmp	r3, #82	; 0x52
 8000b5a:	d106      	bne.n	8000b6a <USART3_IRQHandler+0xba>
 8000b5c:	4b43      	ldr	r3, [pc, #268]	; (8000c6c <USART3_IRQHandler+0x1bc>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	721a      	strb	r2, [r3, #8]
 8000b62:	4b40      	ldr	r3, [pc, #256]	; (8000c64 <USART3_IRQHandler+0x1b4>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	701a      	strb	r2, [r3, #0]
 8000b68:	e06b      	b.n	8000c42 <USART3_IRQHandler+0x192>
		if (c == 'w' || c == 'W') { tester.mode = 1; level = ROOT; break; }
 8000b6a:	4b3d      	ldr	r3, [pc, #244]	; (8000c60 <USART3_IRQHandler+0x1b0>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b77      	cmp	r3, #119	; 0x77
 8000b70:	d003      	beq.n	8000b7a <USART3_IRQHandler+0xca>
 8000b72:	4b3b      	ldr	r3, [pc, #236]	; (8000c60 <USART3_IRQHandler+0x1b0>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	2b57      	cmp	r3, #87	; 0x57
 8000b78:	d15e      	bne.n	8000c38 <USART3_IRQHandler+0x188>
 8000b7a:	4b3c      	ldr	r3, [pc, #240]	; (8000c6c <USART3_IRQHandler+0x1bc>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	721a      	strb	r2, [r3, #8]
 8000b80:	4b38      	ldr	r3, [pc, #224]	; (8000c64 <USART3_IRQHandler+0x1b4>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	701a      	strb	r2, [r3, #0]
 8000b86:	e05c      	b.n	8000c42 <USART3_IRQHandler+0x192>
		break;

	case ADDRESS:
		if (c == CARRIAGE_RETURN) {
 8000b88:	4b35      	ldr	r3, [pc, #212]	; (8000c60 <USART3_IRQHandler+0x1b0>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b0d      	cmp	r3, #13
 8000b8e:	d112      	bne.n	8000bb6 <USART3_IRQHandler+0x106>
			level = ROOT;
 8000b90:	4b34      	ldr	r3, [pc, #208]	; (8000c64 <USART3_IRQHandler+0x1b4>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	701a      	strb	r2, [r3, #0]
			tester.start = atoi(numberBuffer, buffer_index);
 8000b96:	4b36      	ldr	r3, [pc, #216]	; (8000c70 <USART3_IRQHandler+0x1c0>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4835      	ldr	r0, [pc, #212]	; (8000c74 <USART3_IRQHandler+0x1c4>)
 8000b9e:	f7ff ff61 	bl	8000a64 <atoi>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	4a31      	ldr	r2, [pc, #196]	; (8000c6c <USART3_IRQHandler+0x1bc>)
 8000ba6:	6053      	str	r3, [r2, #4]
			buffer_index = 0;
 8000ba8:	4b31      	ldr	r3, [pc, #196]	; (8000c70 <USART3_IRQHandler+0x1c0>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	701a      	strb	r2, [r3, #0]
			wait_for_input = 0;
 8000bae:	4b2e      	ldr	r3, [pc, #184]	; (8000c68 <USART3_IRQHandler+0x1b8>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	701a      	strb	r2, [r3, #0]
			break;
 8000bb4:	e045      	b.n	8000c42 <USART3_IRQHandler+0x192>
		}
		numberBuffer[buffer_index++] = c;
 8000bb6:	4b2e      	ldr	r3, [pc, #184]	; (8000c70 <USART3_IRQHandler+0x1c0>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	1c5a      	adds	r2, r3, #1
 8000bbc:	b2d1      	uxtb	r1, r2
 8000bbe:	4a2c      	ldr	r2, [pc, #176]	; (8000c70 <USART3_IRQHandler+0x1c0>)
 8000bc0:	7011      	strb	r1, [r2, #0]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	4b26      	ldr	r3, [pc, #152]	; (8000c60 <USART3_IRQHandler+0x1b0>)
 8000bc6:	7819      	ldrb	r1, [r3, #0]
 8000bc8:	4b2a      	ldr	r3, [pc, #168]	; (8000c74 <USART3_IRQHandler+0x1c4>)
 8000bca:	5499      	strb	r1, [r3, r2]
		if (buffer_index == BUFFER_MAX -1) {
 8000bcc:	4b28      	ldr	r3, [pc, #160]	; (8000c70 <USART3_IRQHandler+0x1c0>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b0f      	cmp	r3, #15
 8000bd2:	d133      	bne.n	8000c3c <USART3_IRQHandler+0x18c>
			buffer_index = 0;
 8000bd4:	4b26      	ldr	r3, [pc, #152]	; (8000c70 <USART3_IRQHandler+0x1c0>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000bda:	e02f      	b.n	8000c3c <USART3_IRQHandler+0x18c>

	case SIZE:
		if (c == CARRIAGE_RETURN) {
 8000bdc:	4b20      	ldr	r3, [pc, #128]	; (8000c60 <USART3_IRQHandler+0x1b0>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b0d      	cmp	r3, #13
 8000be2:	d112      	bne.n	8000c0a <USART3_IRQHandler+0x15a>
			level = ROOT;
 8000be4:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <USART3_IRQHandler+0x1b4>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	701a      	strb	r2, [r3, #0]
			tester.size = atoi(numberBuffer, buffer_index);
 8000bea:	4b21      	ldr	r3, [pc, #132]	; (8000c70 <USART3_IRQHandler+0x1c0>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4820      	ldr	r0, [pc, #128]	; (8000c74 <USART3_IRQHandler+0x1c4>)
 8000bf2:	f7ff ff37 	bl	8000a64 <atoi>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	4a1c      	ldr	r2, [pc, #112]	; (8000c6c <USART3_IRQHandler+0x1bc>)
 8000bfa:	6013      	str	r3, [r2, #0]
			buffer_index = 0;
 8000bfc:	4b1c      	ldr	r3, [pc, #112]	; (8000c70 <USART3_IRQHandler+0x1c0>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	701a      	strb	r2, [r3, #0]
			wait_for_input = 0;
 8000c02:	4b19      	ldr	r3, [pc, #100]	; (8000c68 <USART3_IRQHandler+0x1b8>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	701a      	strb	r2, [r3, #0]
			break;
 8000c08:	e01b      	b.n	8000c42 <USART3_IRQHandler+0x192>
		}
		numberBuffer[buffer_index++] = c;
 8000c0a:	4b19      	ldr	r3, [pc, #100]	; (8000c70 <USART3_IRQHandler+0x1c0>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	1c5a      	adds	r2, r3, #1
 8000c10:	b2d1      	uxtb	r1, r2
 8000c12:	4a17      	ldr	r2, [pc, #92]	; (8000c70 <USART3_IRQHandler+0x1c0>)
 8000c14:	7011      	strb	r1, [r2, #0]
 8000c16:	461a      	mov	r2, r3
 8000c18:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <USART3_IRQHandler+0x1b0>)
 8000c1a:	7819      	ldrb	r1, [r3, #0]
 8000c1c:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <USART3_IRQHandler+0x1c4>)
 8000c1e:	5499      	strb	r1, [r3, r2]
		if (buffer_index == BUFFER_MAX -1) {
 8000c20:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <USART3_IRQHandler+0x1c0>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b0f      	cmp	r3, #15
 8000c26:	d10b      	bne.n	8000c40 <USART3_IRQHandler+0x190>
			buffer_index = 0;
 8000c28:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <USART3_IRQHandler+0x1c0>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000c2e:	e007      	b.n	8000c40 <USART3_IRQHandler+0x190>

	default:
		break;
 8000c30:	bf00      	nop
 8000c32:	e006      	b.n	8000c42 <USART3_IRQHandler+0x192>
		break;
 8000c34:	bf00      	nop
 8000c36:	e004      	b.n	8000c42 <USART3_IRQHandler+0x192>
		break;
 8000c38:	bf00      	nop
 8000c3a:	e002      	b.n	8000c42 <USART3_IRQHandler+0x192>
		break;
 8000c3c:	bf00      	nop
 8000c3e:	e000      	b.n	8000c42 <USART3_IRQHandler+0x192>
		break;
 8000c40:	bf00      	nop
	}

	// Echo
	while((USART3->ISR & USART_ISR_TC) != USART_ISR_TC);
 8000c42:	bf00      	nop
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <USART3_IRQHandler+0x1ac>)
 8000c46:	69db      	ldr	r3, [r3, #28]
 8000c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c4c:	2b40      	cmp	r3, #64	; 0x40
 8000c4e:	d1f9      	bne.n	8000c44 <USART3_IRQHandler+0x194>
	USART3->TDR = c;
 8000c50:	4b03      	ldr	r3, [pc, #12]	; (8000c60 <USART3_IRQHandler+0x1b0>)
 8000c52:	781a      	ldrb	r2, [r3, #0]
 8000c54:	4b01      	ldr	r3, [pc, #4]	; (8000c5c <USART3_IRQHandler+0x1ac>)
 8000c56:	629a      	str	r2, [r3, #40]	; 0x28

}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40004800 	.word	0x40004800
 8000c60:	20000020 	.word	0x20000020
 8000c64:	20000036 	.word	0x20000036
 8000c68:	20000035 	.word	0x20000035
 8000c6c:	20000038 	.word	0x20000038
 8000c70:	20000034 	.word	0x20000034
 8000c74:	20000024 	.word	0x20000024

08000c78 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr

08000c84 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <HardFault_Handler+0x4>

08000c8a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <MemManage_Handler+0x4>

08000c90 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <BusFault_Handler+0x4>

08000c96 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <UsageFault_Handler+0x4>

08000c9c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr

08000ca8 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr

08000cb4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr

08000cc0 <FMC_SRAM_Init>:
 */


#include "fmc.h"

void FMC_SRAM_Init(void) {
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
 *
 *
 */

	// Enable GPIOD, GPIOE, GPIOF, GPIOG
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN | RCC_AHB1ENR_GPIOEEN | RCC_AHB1ENR_GPIOFEN | RCC_AHB1ENR_GPIOGEN;
 8000cc4:	4b71      	ldr	r3, [pc, #452]	; (8000e8c <FMC_SRAM_Init+0x1cc>)
 8000cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc8:	4a70      	ldr	r2, [pc, #448]	; (8000e8c <FMC_SRAM_Init+0x1cc>)
 8000cca:	f043 0378 	orr.w	r3, r3, #120	; 0x78
 8000cce:	6313      	str	r3, [r2, #48]	; 0x30

	// Set all FMC pins as alternate function 12

	// PD0, PD1, PD14, PD15
	GPIOD->MODER &= ~(GPIO_MODER_MODER0_Msk | GPIO_MODER_MODER1_Msk | GPIO_MODER_MODER14_Msk | GPIO_MODER_MODER15_Msk);
 8000cd0:	4b6f      	ldr	r3, [pc, #444]	; (8000e90 <FMC_SRAM_Init+0x1d0>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	496e      	ldr	r1, [pc, #440]	; (8000e90 <FMC_SRAM_Init+0x1d0>)
 8000cd6:	4b6f      	ldr	r3, [pc, #444]	; (8000e94 <FMC_SRAM_Init+0x1d4>)
 8000cd8:	4013      	ands	r3, r2
 8000cda:	600b      	str	r3, [r1, #0]
	GPIOD->MODER |= (0x02 << GPIO_MODER_MODER0_Pos) | (0x02 << GPIO_MODER_MODER1_Pos) | (0x02 << GPIO_MODER_MODER14_Pos) | (0x02 << GPIO_MODER_MODER15_Pos);
 8000cdc:	4b6c      	ldr	r3, [pc, #432]	; (8000e90 <FMC_SRAM_Init+0x1d0>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	496b      	ldr	r1, [pc, #428]	; (8000e90 <FMC_SRAM_Init+0x1d0>)
 8000ce2:	4b6d      	ldr	r3, [pc, #436]	; (8000e98 <FMC_SRAM_Init+0x1d8>)
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	600b      	str	r3, [r1, #0]
	GPIOD->AFR[0] &= ~(GPIO_AFRL_AFRL0_Msk | GPIO_AFRL_AFRL1_Msk);
 8000ce8:	4b69      	ldr	r3, [pc, #420]	; (8000e90 <FMC_SRAM_Init+0x1d0>)
 8000cea:	6a1b      	ldr	r3, [r3, #32]
 8000cec:	4a68      	ldr	r2, [pc, #416]	; (8000e90 <FMC_SRAM_Init+0x1d0>)
 8000cee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000cf2:	6213      	str	r3, [r2, #32]
	GPIOD->AFR[0] |= (0x0C << GPIO_AFRL_AFRL0_Pos) | (0x0C << GPIO_AFRL_AFRL1_Pos);
 8000cf4:	4b66      	ldr	r3, [pc, #408]	; (8000e90 <FMC_SRAM_Init+0x1d0>)
 8000cf6:	6a1b      	ldr	r3, [r3, #32]
 8000cf8:	4a65      	ldr	r2, [pc, #404]	; (8000e90 <FMC_SRAM_Init+0x1d0>)
 8000cfa:	f043 03cc 	orr.w	r3, r3, #204	; 0xcc
 8000cfe:	6213      	str	r3, [r2, #32]
	GPIOD->AFR[1] &= ~(GPIO_AFRH_AFRH6_Msk | GPIO_AFRH_AFRH7_Msk);
 8000d00:	4b63      	ldr	r3, [pc, #396]	; (8000e90 <FMC_SRAM_Init+0x1d0>)
 8000d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d04:	4a62      	ldr	r2, [pc, #392]	; (8000e90 <FMC_SRAM_Init+0x1d0>)
 8000d06:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000d0a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |= (0x0C << GPIO_AFRH_AFRH6_Pos) | (0x0C << GPIO_AFRH_AFRH7_Pos);
 8000d0c:	4b60      	ldr	r3, [pc, #384]	; (8000e90 <FMC_SRAM_Init+0x1d0>)
 8000d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d10:	4a5f      	ldr	r2, [pc, #380]	; (8000e90 <FMC_SRAM_Init+0x1d0>)
 8000d12:	f043 434c 	orr.w	r3, r3, #3422552064	; 0xcc000000
 8000d16:	6253      	str	r3, [r2, #36]	; 0x24

	// PE7, PE8, PE9, PE10
	GPIOE->MODER &= ~(GPIO_MODER_MODER7_Msk | GPIO_MODER_MODER8_Msk | GPIO_MODER_MODER9_Msk | GPIO_MODER_MODER10_Msk);
 8000d18:	4b60      	ldr	r3, [pc, #384]	; (8000e9c <FMC_SRAM_Init+0x1dc>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a5f      	ldr	r2, [pc, #380]	; (8000e9c <FMC_SRAM_Init+0x1dc>)
 8000d1e:	f423 137f 	bic.w	r3, r3, #4177920	; 0x3fc000
 8000d22:	6013      	str	r3, [r2, #0]
	GPIOE->MODER |= (0x02 << GPIO_MODER_MODER7_Pos) | (0x02 << GPIO_MODER_MODER8_Pos) | (0x02 << GPIO_MODER_MODER9_Pos) | (0x02 << GPIO_MODER_MODER10_Pos);
 8000d24:	4b5d      	ldr	r3, [pc, #372]	; (8000e9c <FMC_SRAM_Init+0x1dc>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a5c      	ldr	r2, [pc, #368]	; (8000e9c <FMC_SRAM_Init+0x1dc>)
 8000d2a:	f443 132a 	orr.w	r3, r3, #2785280	; 0x2a8000
 8000d2e:	6013      	str	r3, [r2, #0]
	GPIOE->AFR[0] &= ~GPIO_AFRL_AFRL7_Msk;
 8000d30:	4b5a      	ldr	r3, [pc, #360]	; (8000e9c <FMC_SRAM_Init+0x1dc>)
 8000d32:	6a1b      	ldr	r3, [r3, #32]
 8000d34:	4a59      	ldr	r2, [pc, #356]	; (8000e9c <FMC_SRAM_Init+0x1dc>)
 8000d36:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000d3a:	6213      	str	r3, [r2, #32]
	GPIOE->AFR[0] |= (0x0C << GPIO_AFRL_AFRL7_Pos);
 8000d3c:	4b57      	ldr	r3, [pc, #348]	; (8000e9c <FMC_SRAM_Init+0x1dc>)
 8000d3e:	6a1b      	ldr	r3, [r3, #32]
 8000d40:	4a56      	ldr	r2, [pc, #344]	; (8000e9c <FMC_SRAM_Init+0x1dc>)
 8000d42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000d46:	6213      	str	r3, [r2, #32]
	GPIOE->AFR[1] &= ~(GPIO_AFRH_AFRH0_Msk | GPIO_AFRH_AFRH1_Msk | GPIO_AFRH_AFRH2_Msk);
 8000d48:	4b54      	ldr	r3, [pc, #336]	; (8000e9c <FMC_SRAM_Init+0x1dc>)
 8000d4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d4c:	4953      	ldr	r1, [pc, #332]	; (8000e9c <FMC_SRAM_Init+0x1dc>)
 8000d4e:	4b54      	ldr	r3, [pc, #336]	; (8000ea0 <FMC_SRAM_Init+0x1e0>)
 8000d50:	4013      	ands	r3, r2
 8000d52:	624b      	str	r3, [r1, #36]	; 0x24
	GPIOE->AFR[1] |= (0x0C << GPIO_AFRH_AFRH0_Pos) | (0x0C << GPIO_AFRH_AFRH1_Pos) | (0x0C << GPIO_AFRH_AFRH2_Pos);
 8000d54:	4b51      	ldr	r3, [pc, #324]	; (8000e9c <FMC_SRAM_Init+0x1dc>)
 8000d56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d58:	4950      	ldr	r1, [pc, #320]	; (8000e9c <FMC_SRAM_Init+0x1dc>)
 8000d5a:	f640 43cc 	movw	r3, #3276	; 0xccc
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	624b      	str	r3, [r1, #36]	; 0x24

	// PF0, PF1, PF2, PF3, PF4, PF5, PF12, PF13, PF14, PF15
	GPIOF->MODER &= ~(GPIO_MODER_MODER0_Msk | GPIO_MODER_MODER1_Msk | GPIO_MODER_MODER2_Msk | GPIO_MODER_MODER3_Msk | GPIO_MODER_MODER4_Msk |
 8000d62:	4b50      	ldr	r3, [pc, #320]	; (8000ea4 <FMC_SRAM_Init+0x1e4>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	494f      	ldr	r1, [pc, #316]	; (8000ea4 <FMC_SRAM_Init+0x1e4>)
 8000d68:	4b4f      	ldr	r3, [pc, #316]	; (8000ea8 <FMC_SRAM_Init+0x1e8>)
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	600b      	str	r3, [r1, #0]
			GPIO_MODER_MODER5_Msk | GPIO_MODER_MODER12_Msk | GPIO_MODER_MODER13_Msk | GPIO_MODER_MODER14_Msk | GPIO_MODER_MODER15_Msk);
	GPIOF->MODER |= (0x02 << GPIO_MODER_MODER0_Pos) | (0x02 << GPIO_MODER_MODER1_Pos) | (0x02 << GPIO_MODER_MODER2_Pos) | (0x02 << GPIO_MODER_MODER3_Pos) | (0x02 << GPIO_MODER_MODER4_Pos) |
 8000d6e:	4b4d      	ldr	r3, [pc, #308]	; (8000ea4 <FMC_SRAM_Init+0x1e4>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	494c      	ldr	r1, [pc, #304]	; (8000ea4 <FMC_SRAM_Init+0x1e4>)
 8000d74:	4b4d      	ldr	r3, [pc, #308]	; (8000eac <FMC_SRAM_Init+0x1ec>)
 8000d76:	4313      	orrs	r3, r2
 8000d78:	600b      	str	r3, [r1, #0]
			(0x02 << GPIO_MODER_MODER5_Pos) | (0x02 << GPIO_MODER_MODER12_Pos) | (0x02 << GPIO_MODER_MODER13_Pos) | (0x02 << GPIO_MODER_MODER14_Pos) | (0x02 << GPIO_MODER_MODER15_Pos);
	GPIOF->AFR[0] &= ~(GPIO_AFRL_AFRL0_Msk | GPIO_AFRL_AFRL1_Msk | GPIO_AFRL_AFRL2_Msk | GPIO_AFRL_AFRL3_Msk | GPIO_AFRL_AFRL4_Msk | GPIO_AFRL_AFRL5_Msk);
 8000d7a:	4b4a      	ldr	r3, [pc, #296]	; (8000ea4 <FMC_SRAM_Init+0x1e4>)
 8000d7c:	6a1b      	ldr	r3, [r3, #32]
 8000d7e:	4a49      	ldr	r2, [pc, #292]	; (8000ea4 <FMC_SRAM_Init+0x1e4>)
 8000d80:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8000d84:	6213      	str	r3, [r2, #32]
	GPIOF->AFR[0] |= (0x0C << GPIO_AFRL_AFRL0_Pos) | (0x0C << GPIO_AFRL_AFRL1_Pos) | (0x0C << GPIO_AFRL_AFRL2_Pos) | (0x0C << GPIO_AFRL_AFRL3_Pos) | (0x0C << GPIO_AFRL_AFRL4_Pos) | (0x0C << GPIO_AFRL_AFRL5_Pos);
 8000d86:	4b47      	ldr	r3, [pc, #284]	; (8000ea4 <FMC_SRAM_Init+0x1e4>)
 8000d88:	6a1a      	ldr	r2, [r3, #32]
 8000d8a:	4946      	ldr	r1, [pc, #280]	; (8000ea4 <FMC_SRAM_Init+0x1e4>)
 8000d8c:	4b48      	ldr	r3, [pc, #288]	; (8000eb0 <FMC_SRAM_Init+0x1f0>)
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	620b      	str	r3, [r1, #32]
	GPIOF->AFR[1] &= ~(GPIO_AFRH_AFRH4_Msk | GPIO_AFRH_AFRH5_Msk | GPIO_AFRH_AFRH6_Msk | GPIO_AFRH_AFRH7_Msk);
 8000d92:	4b44      	ldr	r3, [pc, #272]	; (8000ea4 <FMC_SRAM_Init+0x1e4>)
 8000d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d96:	4a43      	ldr	r2, [pc, #268]	; (8000ea4 <FMC_SRAM_Init+0x1e4>)
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOF->AFR[1] |= (0x0C << GPIO_AFRH_AFRH4_Pos) | (0x0C << GPIO_AFRH_AFRH5_Pos) | (0x0C << GPIO_AFRH_AFRH6_Pos) | (0x0C << GPIO_AFRH_AFRH7_Pos);
 8000d9c:	4b41      	ldr	r3, [pc, #260]	; (8000ea4 <FMC_SRAM_Init+0x1e4>)
 8000d9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000da0:	4940      	ldr	r1, [pc, #256]	; (8000ea4 <FMC_SRAM_Init+0x1e4>)
 8000da2:	4b44      	ldr	r3, [pc, #272]	; (8000eb4 <FMC_SRAM_Init+0x1f4>)
 8000da4:	4313      	orrs	r3, r2
 8000da6:	624b      	str	r3, [r1, #36]	; 0x24

	// PG0, PG1, PG2, PG3, PG4
	GPIOG->MODER &= ~(GPIO_MODER_MODER0_Msk | GPIO_MODER_MODER1_Msk |  GPIO_MODER_MODER2_Msk | GPIO_MODER_MODER3_Msk | GPIO_MODER_MODER4_Msk);
 8000da8:	4b43      	ldr	r3, [pc, #268]	; (8000eb8 <FMC_SRAM_Init+0x1f8>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4942      	ldr	r1, [pc, #264]	; (8000eb8 <FMC_SRAM_Init+0x1f8>)
 8000dae:	4b43      	ldr	r3, [pc, #268]	; (8000ebc <FMC_SRAM_Init+0x1fc>)
 8000db0:	4013      	ands	r3, r2
 8000db2:	600b      	str	r3, [r1, #0]
	GPIOG->MODER |= (0x02 << GPIO_MODER_MODER0_Pos) | (0x02 << GPIO_MODER_MODER1_Pos) | (0x02 << GPIO_MODER_MODER2_Pos) | (0x02 << GPIO_MODER_MODER3_Pos) | (0x02 << GPIO_MODER_MODER4_Pos);
 8000db4:	4b40      	ldr	r3, [pc, #256]	; (8000eb8 <FMC_SRAM_Init+0x1f8>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	493f      	ldr	r1, [pc, #252]	; (8000eb8 <FMC_SRAM_Init+0x1f8>)
 8000dba:	f240 23aa 	movw	r3, #682	; 0x2aa
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	600b      	str	r3, [r1, #0]
	GPIOG->AFR[0] &= ~(GPIO_AFRL_AFRL0_Msk | GPIO_AFRL_AFRL1_Msk | GPIO_AFRL_AFRL2_Msk | GPIO_AFRL_AFRL3_Msk | GPIO_AFRL_AFRL4_Msk);
 8000dc2:	4b3d      	ldr	r3, [pc, #244]	; (8000eb8 <FMC_SRAM_Init+0x1f8>)
 8000dc4:	6a1a      	ldr	r2, [r3, #32]
 8000dc6:	493c      	ldr	r1, [pc, #240]	; (8000eb8 <FMC_SRAM_Init+0x1f8>)
 8000dc8:	4b3d      	ldr	r3, [pc, #244]	; (8000ec0 <FMC_SRAM_Init+0x200>)
 8000dca:	4013      	ands	r3, r2
 8000dcc:	620b      	str	r3, [r1, #32]
	GPIOG->AFR[0] |= (0x0C << GPIO_AFRL_AFRL0_Pos) | (0x0C << GPIO_AFRL_AFRL1_Pos) | (0x0C << GPIO_AFRL_AFRL2_Pos) | (0x0C << GPIO_AFRL_AFRL3_Pos) | (0x0C << GPIO_AFRL_AFRL4_Pos);
 8000dce:	4b3a      	ldr	r3, [pc, #232]	; (8000eb8 <FMC_SRAM_Init+0x1f8>)
 8000dd0:	6a1a      	ldr	r2, [r3, #32]
 8000dd2:	4939      	ldr	r1, [pc, #228]	; (8000eb8 <FMC_SRAM_Init+0x1f8>)
 8000dd4:	4b3b      	ldr	r3, [pc, #236]	; (8000ec4 <FMC_SRAM_Init+0x204>)
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	620b      	str	r3, [r1, #32]

	// PD4, PD5, PD7
	GPIOD->MODER &= ~(GPIO_MODER_MODER4_Msk | GPIO_MODER_MODER5_Msk  | GPIO_MODER_MODER7_Msk);
 8000dda:	4b2d      	ldr	r3, [pc, #180]	; (8000e90 <FMC_SRAM_Init+0x1d0>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a2c      	ldr	r2, [pc, #176]	; (8000e90 <FMC_SRAM_Init+0x1d0>)
 8000de0:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8000de4:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= (0x02 << GPIO_MODER_MODER4_Pos) | (0x02 << GPIO_MODER_MODER5_Pos) | (0x02 << GPIO_MODER_MODER7_Pos);
 8000de6:	4b2a      	ldr	r3, [pc, #168]	; (8000e90 <FMC_SRAM_Init+0x1d0>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a29      	ldr	r2, [pc, #164]	; (8000e90 <FMC_SRAM_Init+0x1d0>)
 8000dec:	f443 430a 	orr.w	r3, r3, #35328	; 0x8a00
 8000df0:	6013      	str	r3, [r2, #0]
	GPIOD->AFR[0] &= ~(GPIO_AFRL_AFRL4_Msk | GPIO_AFRL_AFRL5_Msk | GPIO_AFRL_AFRL7_Msk);
 8000df2:	4b27      	ldr	r3, [pc, #156]	; (8000e90 <FMC_SRAM_Init+0x1d0>)
 8000df4:	6a1a      	ldr	r2, [r3, #32]
 8000df6:	4926      	ldr	r1, [pc, #152]	; (8000e90 <FMC_SRAM_Init+0x1d0>)
 8000df8:	4b33      	ldr	r3, [pc, #204]	; (8000ec8 <FMC_SRAM_Init+0x208>)
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	620b      	str	r3, [r1, #32]
	GPIOD->AFR[0] |= (0x0C << GPIO_AFRL_AFRL4_Pos) | (0x0C << GPIO_AFRL_AFRL5_Pos) | (0x0C << GPIO_AFRL_AFRL7_Pos);
 8000dfe:	4b24      	ldr	r3, [pc, #144]	; (8000e90 <FMC_SRAM_Init+0x1d0>)
 8000e00:	6a1a      	ldr	r2, [r3, #32]
 8000e02:	4923      	ldr	r1, [pc, #140]	; (8000e90 <FMC_SRAM_Init+0x1d0>)
 8000e04:	4b31      	ldr	r3, [pc, #196]	; (8000ecc <FMC_SRAM_Init+0x20c>)
 8000e06:	4313      	orrs	r3, r2
 8000e08:	620b      	str	r3, [r1, #32]

	// Enable FMC clock
	RCC->AHB3ENR |= RCC_AHB3ENR_FMCEN;
 8000e0a:	4b20      	ldr	r3, [pc, #128]	; (8000e8c <FMC_SRAM_Init+0x1cc>)
 8000e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e0e:	4a1f      	ldr	r2, [pc, #124]	; (8000e8c <FMC_SRAM_Init+0x1cc>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6393      	str	r3, [r2, #56]	; 0x38

	// Reset Bank 1, device number 1
	FMC_Bank1->BTCR[0] = 0x000030DB;
 8000e16:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8000e1a:	f243 02db 	movw	r2, #12507	; 0x30db
 8000e1e:	601a      	str	r2, [r3, #0]
	FMC_Bank1->BTCR[4] = 0x0FFFFFFF;
 8000e20:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8000e24:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8000e28:	611a      	str	r2, [r3, #16]
	FMC_Bank1E->BWTR[0] = 0x0FFFFFFF;
 8000e2a:	4b29      	ldr	r3, [pc, #164]	; (8000ed0 <FMC_SRAM_Init+0x210>)
 8000e2c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8000e30:	601a      	str	r2, [r3, #0]

	// Disable NOR flash memory access
	FMC_Bank1->BTCR[0] &= ~FMC_BCR1_FACCEN_Msk;
 8000e32:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000e3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e40:	6013      	str	r3, [r2, #0]

	// Set memory width to 8 bits
	FMC_Bank1->BTCR[0] &= ~FMC_BCR1_MWID_Msk;
 8000e42:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000e4c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000e50:	6013      	str	r3, [r2, #0]

	// Select SRAM memory type
	FMC_Bank1->BTCR[0] &= ~FMC_BCR1_MTYP_Msk;
 8000e52:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000e5c:	f023 030c 	bic.w	r3, r3, #12
 8000e60:	6013      	str	r3, [r2, #0]

	// Disable Address/data multiplexing
	FMC_Bank1->BTCR[0] &= ~FMC_BCR1_MUXEN_Msk;
 8000e62:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000e6c:	f023 0302 	bic.w	r3, r3, #2
 8000e70:	6013      	str	r3, [r2, #0]

	// Enable Bank 1
	FMC_Bank1->BTCR[0] |= FMC_BCR1_MBKEN;
 8000e72:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6013      	str	r3, [r2, #0]
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40020c00 	.word	0x40020c00
 8000e94:	0ffffff0 	.word	0x0ffffff0
 8000e98:	a000000a 	.word	0xa000000a
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	fffff000 	.word	0xfffff000
 8000ea4:	40021400 	.word	0x40021400
 8000ea8:	00fff000 	.word	0x00fff000
 8000eac:	aa000aaa 	.word	0xaa000aaa
 8000eb0:	00cccccc 	.word	0x00cccccc
 8000eb4:	cccc0000 	.word	0xcccc0000
 8000eb8:	40021800 	.word	0x40021800
 8000ebc:	fffffc00 	.word	0xfffffc00
 8000ec0:	fff00000 	.word	0xfff00000
 8000ec4:	000ccccc 	.word	0x000ccccc
 8000ec8:	0f00ffff 	.word	0x0f00ffff
 8000ecc:	c0cc0000 	.word	0xc0cc0000
 8000ed0:	a0000104 	.word	0xa0000104

08000ed4 <USART3_Console_Init>:
 */


#include "usart.h"

void USART3_Console_Init(void) {
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
	 *
	 * using RX interrupts
	 */

	// Enable GPIOD clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8000ed8:	4b27      	ldr	r3, [pc, #156]	; (8000f78 <USART3_Console_Init+0xa4>)
 8000eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000edc:	4a26      	ldr	r2, [pc, #152]	; (8000f78 <USART3_Console_Init+0xa4>)
 8000ede:	f043 0308 	orr.w	r3, r3, #8
 8000ee2:	6313      	str	r3, [r2, #48]	; 0x30

	// Set PD8, PD9 as AF7
	GPIOD->MODER &= ~(GPIO_MODER_MODER8_Msk | GPIO_MODER_MODER9_Msk);
 8000ee4:	4b25      	ldr	r3, [pc, #148]	; (8000f7c <USART3_Console_Init+0xa8>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a24      	ldr	r2, [pc, #144]	; (8000f7c <USART3_Console_Init+0xa8>)
 8000eea:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000eee:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= (0x02 << GPIO_MODER_MODER8_Pos) | (0x02 << GPIO_MODER_MODER9_Pos);
 8000ef0:	4b22      	ldr	r3, [pc, #136]	; (8000f7c <USART3_Console_Init+0xa8>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a21      	ldr	r2, [pc, #132]	; (8000f7c <USART3_Console_Init+0xa8>)
 8000ef6:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8000efa:	6013      	str	r3, [r2, #0]
	GPIOD->AFR[1] &= ~(GPIO_AFRH_AFRH0_Msk | GPIO_AFRH_AFRH1_Msk);
 8000efc:	4b1f      	ldr	r3, [pc, #124]	; (8000f7c <USART3_Console_Init+0xa8>)
 8000efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f00:	4a1e      	ldr	r2, [pc, #120]	; (8000f7c <USART3_Console_Init+0xa8>)
 8000f02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000f06:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |= (0x07 << GPIO_AFRH_AFRH0_Pos) | (0x07 << GPIO_AFRH_AFRH1_Pos);
 8000f08:	4b1c      	ldr	r3, [pc, #112]	; (8000f7c <USART3_Console_Init+0xa8>)
 8000f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0c:	4a1b      	ldr	r2, [pc, #108]	; (8000f7c <USART3_Console_Init+0xa8>)
 8000f0e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8000f12:	6253      	str	r3, [r2, #36]	; 0x24

	// Select PCLK1 @54MHz as clock source
	RCC->DCKCFGR2 &= ~RCC_DCKCFGR2_USART3SEL_Msk;
 8000f14:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <USART3_Console_Init+0xa4>)
 8000f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f1a:	4a17      	ldr	r2, [pc, #92]	; (8000f78 <USART3_Console_Init+0xa4>)
 8000f1c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000f20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	// Enable USART3 clock
	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 8000f24:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <USART3_Console_Init+0xa4>)
 8000f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f28:	4a13      	ldr	r2, [pc, #76]	; (8000f78 <USART3_Console_Init+0xa4>)
 8000f2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f2e:	6413      	str	r3, [r2, #64]	; 0x40

	// Reset USART3 configuration
	USART3->CR1 = 0x00000000;
 8000f30:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <USART3_Console_Init+0xac>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
	USART3->CR2 = 0x00000000;
 8000f36:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <USART3_Console_Init+0xac>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	605a      	str	r2, [r3, #4]
	USART3->CR3 = 0x00000000;
 8000f3c:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <USART3_Console_Init+0xac>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]

	// Enable RX interrupt
	USART3->CR1 |= USART_CR1_RXNEIE;
 8000f42:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <USART3_Console_Init+0xac>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a0e      	ldr	r2, [pc, #56]	; (8000f80 <USART3_Console_Init+0xac>)
 8000f48:	f043 0320 	orr.w	r3, r3, #32
 8000f4c:	6013      	str	r3, [r2, #0]

	// Set baud rate
	USART3->BRR = (uint16_t)5625;
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <USART3_Console_Init+0xac>)
 8000f50:	f241 52f9 	movw	r2, #5625	; 0x15f9
 8000f54:	60da      	str	r2, [r3, #12]

	// Enable RX and TX
	USART3->CR1 |= USART_CR1_TE | USART_CR1_RE;
 8000f56:	4b0a      	ldr	r3, [pc, #40]	; (8000f80 <USART3_Console_Init+0xac>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a09      	ldr	r2, [pc, #36]	; (8000f80 <USART3_Console_Init+0xac>)
 8000f5c:	f043 030c 	orr.w	r3, r3, #12
 8000f60:	6013      	str	r3, [r2, #0]

	// Enable USART3
	USART3->CR1 |= USART_CR1_UE;
 8000f62:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <USART3_Console_Init+0xac>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a06      	ldr	r2, [pc, #24]	; (8000f80 <USART3_Console_Init+0xac>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6013      	str	r3, [r2, #0]
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40020c00 	.word	0x40020c00
 8000f80:	40004800 	.word	0x40004800

08000f84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fbc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f88:	480d      	ldr	r0, [pc, #52]	; (8000fc0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f8a:	490e      	ldr	r1, [pc, #56]	; (8000fc4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f8c:	4a0e      	ldr	r2, [pc, #56]	; (8000fc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f90:	e002      	b.n	8000f98 <LoopCopyDataInit>

08000f92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f96:	3304      	adds	r3, #4

08000f98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f9c:	d3f9      	bcc.n	8000f92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f9e:	4a0b      	ldr	r2, [pc, #44]	; (8000fcc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fa0:	4c0b      	ldr	r4, [pc, #44]	; (8000fd0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa4:	e001      	b.n	8000faa <LoopFillZerobss>

08000fa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa8:	3204      	adds	r2, #4

08000faa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000faa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fac:	d3fb      	bcc.n	8000fa6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fae:	f000 f812 	bl	8000fd6 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fb2:	f000 f897 	bl	80010e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fb6:	f7ff f991 	bl	80002dc <main>
  bx  lr    
 8000fba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fbc:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000fc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000fc8:	08001328 	.word	0x08001328
  ldr r2, =_sbss
 8000fcc:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000fd0:	20000044 	.word	0x20000044

08000fd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fd4:	e7fe      	b.n	8000fd4 <ADC_IRQHandler>

08000fd6 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr
	...

08000fe4 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b087      	sub	sp, #28
 8000fe8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000ffe:	4b34      	ldr	r3, [pc, #208]	; (80010d0 <SystemCoreClockUpdate+0xec>)
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	f003 030c 	and.w	r3, r3, #12
 8001006:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	2b08      	cmp	r3, #8
 800100c:	d011      	beq.n	8001032 <SystemCoreClockUpdate+0x4e>
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	2b08      	cmp	r3, #8
 8001012:	d844      	bhi.n	800109e <SystemCoreClockUpdate+0xba>
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <SystemCoreClockUpdate+0x3e>
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	2b04      	cmp	r3, #4
 800101e:	d004      	beq.n	800102a <SystemCoreClockUpdate+0x46>
 8001020:	e03d      	b.n	800109e <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001022:	4b2c      	ldr	r3, [pc, #176]	; (80010d4 <SystemCoreClockUpdate+0xf0>)
 8001024:	4a2c      	ldr	r2, [pc, #176]	; (80010d8 <SystemCoreClockUpdate+0xf4>)
 8001026:	601a      	str	r2, [r3, #0]
      break;
 8001028:	e03d      	b.n	80010a6 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800102a:	4b2a      	ldr	r3, [pc, #168]	; (80010d4 <SystemCoreClockUpdate+0xf0>)
 800102c:	4a2b      	ldr	r2, [pc, #172]	; (80010dc <SystemCoreClockUpdate+0xf8>)
 800102e:	601a      	str	r2, [r3, #0]
      break;
 8001030:	e039      	b.n	80010a6 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001032:	4b27      	ldr	r3, [pc, #156]	; (80010d0 <SystemCoreClockUpdate+0xec>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	0d9b      	lsrs	r3, r3, #22
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800103e:	4b24      	ldr	r3, [pc, #144]	; (80010d0 <SystemCoreClockUpdate+0xec>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001046:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d00c      	beq.n	8001068 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800104e:	4a23      	ldr	r2, [pc, #140]	; (80010dc <SystemCoreClockUpdate+0xf8>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	fbb2 f3f3 	udiv	r3, r2, r3
 8001056:	4a1e      	ldr	r2, [pc, #120]	; (80010d0 <SystemCoreClockUpdate+0xec>)
 8001058:	6852      	ldr	r2, [r2, #4]
 800105a:	0992      	lsrs	r2, r2, #6
 800105c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001060:	fb02 f303 	mul.w	r3, r2, r3
 8001064:	617b      	str	r3, [r7, #20]
 8001066:	e00b      	b.n	8001080 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001068:	4a1b      	ldr	r2, [pc, #108]	; (80010d8 <SystemCoreClockUpdate+0xf4>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001070:	4a17      	ldr	r2, [pc, #92]	; (80010d0 <SystemCoreClockUpdate+0xec>)
 8001072:	6852      	ldr	r2, [r2, #4]
 8001074:	0992      	lsrs	r2, r2, #6
 8001076:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800107a:	fb02 f303 	mul.w	r3, r2, r3
 800107e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001080:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <SystemCoreClockUpdate+0xec>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	0c1b      	lsrs	r3, r3, #16
 8001086:	f003 0303 	and.w	r3, r3, #3
 800108a:	3301      	adds	r3, #1
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8001090:	697a      	ldr	r2, [r7, #20]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	fbb2 f3f3 	udiv	r3, r2, r3
 8001098:	4a0e      	ldr	r2, [pc, #56]	; (80010d4 <SystemCoreClockUpdate+0xf0>)
 800109a:	6013      	str	r3, [r2, #0]
      break;
 800109c:	e003      	b.n	80010a6 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 800109e:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <SystemCoreClockUpdate+0xf0>)
 80010a0:	4a0d      	ldr	r2, [pc, #52]	; (80010d8 <SystemCoreClockUpdate+0xf4>)
 80010a2:	601a      	str	r2, [r3, #0]
      break;
 80010a4:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80010a6:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <SystemCoreClockUpdate+0xec>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	091b      	lsrs	r3, r3, #4
 80010ac:	f003 030f 	and.w	r3, r3, #15
 80010b0:	4a0b      	ldr	r2, [pc, #44]	; (80010e0 <SystemCoreClockUpdate+0xfc>)
 80010b2:	5cd3      	ldrb	r3, [r2, r3]
 80010b4:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80010b6:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <SystemCoreClockUpdate+0xf0>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	fa22 f303 	lsr.w	r3, r2, r3
 80010c0:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <SystemCoreClockUpdate+0xf0>)
 80010c2:	6013      	str	r3, [r2, #0]
}
 80010c4:	bf00      	nop
 80010c6:	371c      	adds	r7, #28
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	40023800 	.word	0x40023800
 80010d4:	20000000 	.word	0x20000000
 80010d8:	00f42400 	.word	0x00f42400
 80010dc:	007a1200 	.word	0x007a1200
 80010e0:	08001310 	.word	0x08001310

080010e4 <__libc_init_array>:
 80010e4:	b570      	push	{r4, r5, r6, lr}
 80010e6:	4d0d      	ldr	r5, [pc, #52]	; (800111c <__libc_init_array+0x38>)
 80010e8:	4c0d      	ldr	r4, [pc, #52]	; (8001120 <__libc_init_array+0x3c>)
 80010ea:	1b64      	subs	r4, r4, r5
 80010ec:	10a4      	asrs	r4, r4, #2
 80010ee:	2600      	movs	r6, #0
 80010f0:	42a6      	cmp	r6, r4
 80010f2:	d109      	bne.n	8001108 <__libc_init_array+0x24>
 80010f4:	4d0b      	ldr	r5, [pc, #44]	; (8001124 <__libc_init_array+0x40>)
 80010f6:	4c0c      	ldr	r4, [pc, #48]	; (8001128 <__libc_init_array+0x44>)
 80010f8:	f000 f818 	bl	800112c <_init>
 80010fc:	1b64      	subs	r4, r4, r5
 80010fe:	10a4      	asrs	r4, r4, #2
 8001100:	2600      	movs	r6, #0
 8001102:	42a6      	cmp	r6, r4
 8001104:	d105      	bne.n	8001112 <__libc_init_array+0x2e>
 8001106:	bd70      	pop	{r4, r5, r6, pc}
 8001108:	f855 3b04 	ldr.w	r3, [r5], #4
 800110c:	4798      	blx	r3
 800110e:	3601      	adds	r6, #1
 8001110:	e7ee      	b.n	80010f0 <__libc_init_array+0xc>
 8001112:	f855 3b04 	ldr.w	r3, [r5], #4
 8001116:	4798      	blx	r3
 8001118:	3601      	adds	r6, #1
 800111a:	e7f2      	b.n	8001102 <__libc_init_array+0x1e>
 800111c:	08001320 	.word	0x08001320
 8001120:	08001320 	.word	0x08001320
 8001124:	08001320 	.word	0x08001320
 8001128:	08001324 	.word	0x08001324

0800112c <_init>:
 800112c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800112e:	bf00      	nop
 8001130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001132:	bc08      	pop	{r3}
 8001134:	469e      	mov	lr, r3
 8001136:	4770      	bx	lr

08001138 <_fini>:
 8001138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800113a:	bf00      	nop
 800113c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800113e:	bc08      	pop	{r3}
 8001140:	469e      	mov	lr, r3
 8001142:	4770      	bx	lr
